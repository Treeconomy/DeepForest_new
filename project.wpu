#!wing
#!version=7.0
##################################################################
# Wing project file : User-specific branch                       #
##################################################################
[user attributes]
debug.breakpoints = {loc('sandbox.py'): {8L: (0,
        None,
        1,
        0)},
                     loc('tests/test_model.py'): {10L: (0,
        None,
        1,
        0)}}
debug.err-values = {loc('../../../../Applications/WingPro.app/Contents/Resources/src/testing/runners/run_pytest_xml.py'): {}}
debug.exceptions-ignored = {loc('../../opt/miniconda3/envs/DeepForest/lib/python3.7/site-packages/_pytest/config/__init__.py'): {1514: True},
                            loc('../../opt/miniconda3/envs/DeepForest_pytorch/lib/python3.8/site-packages/_pytest/config/__init__.py'): {1514: True}}
debug.remote-hosts = (9,
                      [{'activate-cmd': '',
                        'agent-port': 0,
                        'basedir': u'',
                        'debug-port': 0,
                        'file-encoding': None,
                        'forward-x11': False,
                        'hostname': 'b.weinstein@hpg.rc.ufl.edu',
                        'id': 'Hipergator',
                        'io-encoding': None,
                        'private-key': None,
                        'pyexec': u'~/miniconda3/envs/deepforest_pytorch/bin/python',
                        'shared': False,
                        'ssh-bootstrap': '',
                        'ssh-port': None,
                        'use-local-tunnel': True,
                        'winghome': ''}])
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': 'BeCfPquEZeqQ6pfJCERhTaNA7C'\
        'a3fCTw',
        'size-state': '',
        'type': 'dock',
        'view': {'area': 'tall',
                 'constraint': None,
                 'current_pages': [0,
                                   0],
                 'full-screen': False,
                 'notebook_display': 'normal',
                 'notebook_percent': 0.24526134405514077,
                 'override_title': None,
                 'pagelist': [('project',
                               'tall',
                               0,
                               {'tree-state': {'file-sort-method': 'by name',
        'list-files-first': False,
        'tree-states': {'deep': {'expanded-nodes': [(1,),
        (1,
         0),
        (6,),
        (6,
         0),
        (18,)],
                                 'selected-nodes': [(1,
        2)],
                                 'top-node': (1,
        0,
        17)}},
        'tree-style': 'deep'}}),
                              ('browser',
                               'tall',
                               0,
                               {}),
                              ('snippets',
                               'tall',
                               0,
                               {}),
                              ('source-assistant',
                               'tall',
                               2,
                               {}),
                              ('debug-stack',
                               'tall',
                               1,
                               {}),
                              ('indent',
                               'tall',
                               2,
                               {})],
                 'primary_view_state': {'area': 'wide',
        'constraint': None,
        'current_pages': [4,
                          2],
        'notebook_display': 'normal',
        'notebook_percent': 0.48918640576725025,
        'override_title': None,
        'pagelist': [('batch-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 42,
                                       'fReplaceText': u'',
                                       'fReverse': False,
                                       'fSearchText': u'',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('interactive-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 42,
                                       'fReplaceText': u'format_boxes',
                                       'fReverse': False,
                                       'fSearchText': u'dataset',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': True,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False}}),
                     ('debug-data',
                      'wide',
                      0,
                      {}),
                     ('debug-breakpoints',
                      'wide',
                      0,
                      {'tree-state': []}),
                     ('testing',
                      'wide',
                      0,
                      {'added-files': [],
                       'filter': u'',
                       'recent-filters': None,
                       'sort-order': 'source-lineno',
                       'tree-state': {'expanded-nodes': [(0,),
        (0,
         0),
        (1,),
        (1,
         0),
        (5,),
        (6,),
        (8,),
        (8,
         4)],
                                      'selected-nodes': [(8,)],
                                      'top-node': (6,
        5)}}),
                     ('debug-io',
                      'wide',
                      1,
                      {}),
                     ('debug-exceptions',
                      'wide',
                      1,
                      {}),
                     ('debug-probe',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'code-line': '',
                       'first-line': 1820L,
                       'folded-linenos': [],
                       'history': {u'file:/Applications/WingPro.app/Contents/Resources/src/debug/tserver/_sandbox.py': ['p'\
        'ath\n'],
                                   u'file:/Applications/WingPro.app/Contents/Resources/src/testing/runners/run_pytest_xml.py': ['d'\
        'f.head(n=5)\n',
        'gdf.head(n=5)\n',
        'gdf.columns\n',
        'gdf.species.unique()\n',
        'df.shape\n',
        'df.columns\n',
        'rgb_path\n',
        'gdf.species\n',
        '[label_dict[x] for x in class_totals["index"].values]\n',
        'field["shaded"] = field.groupby("individualID").apply(lambda x: any'\
        '(y in x for y in ["Full shade", "Mostly shaded"]))\n',
        'field["shaded"]\n',
        'field["shaded"] = field.groupby("individualID").canopyPosition.appl'\
        'y(lambda x: any(y in x for y in ["Full shade", "Mostly shaded"]))\n',
        'field["shaded"].unique()\n',
        '"Full shade" in \n',
        'groups = field.groupby("individualID")\n',
        'groups[0]\n',
        'field.canopyPosition\n',
        'field.canopyPosition.unique()\n',
        'field.canopyPosition.unique() in ["Full shade","Mostly shaded"]\n',
        'any([x in ["Full shade", "Mostly shaded"] for x in group.canopyPosi'\
        'tion.values])\n',
        'group\n',
        'group.canopyPosition\n',
        'group.canopyPosition.values\n',
        'group.individualID.unique()\n',
        'group.individualID.unique()[0]\n',
        'len(shaded_ids)\n',
        'field\n',
        'field[field.individualID.isin(shaded_ids)].canopyPosition\n',
        'field[field.individualID.isin(shaded_ids)].canopyPosition.unique()'\
        '\n',
        'field[field.individualID.isin(shaded_ids)].canopyPosition.value_cou'\
        'nts()\n',
        'shaded_ids\n',
        'open_grown = field[field.canopyPosition=="Open grown"]\n',
        'open_grown.shape\n',
        'mostly_shaded = field[field.canopyPosition=="Mostly shaded"]\n',
        'mostly_shaded = field[field.canopyPosition=="Full shade"]\n',
        '[x for x in mostly_shaded.individualID if x in open_grown.individua'\
        'lID]\n',
        'mostly_shaded.individualID\n',
        'mostly_shaded.individualID in open_grown.individualID\n',
        '[x for x in mostly_shaded.individualID if x in open_grown.individua'\
        'lID.values]\n',
        'field[field.individualID == "NEON.PLA.D04.GUAN.02104"]\n',
        'field[field.individualID == "NEON.PLA.D04.GUAN.02104"][["canopyPosi'\
        'tion","height","eventID"]]\n',
        'metric\n',
        'ground_truth.shape\n',
        'visualize.plot_prediction_dataframe(df=predictions, ground_truth=gr'\
        'ound_truth, root_dir=root_dir)\n',
        'from deepforest import visualize\n',
        'visualize.plot_prediction_dataframe(df=predictions, ground_truth=gr'\
        'ound_truth, root_dir=os.path.dirname(csv_file))\n',
        'sum(result.IoU > 0.5)\n',
        'sum(result.IoU > 0.5)/\n',
        'assert result.shape == ground_truth.shape\n',
        'result\n',
        'results.append(result)\n',
        'results = pd.concat(results)\n',
        'results["match"] = results.IoU > iou_threshold\n',
        'true_positive = sum(results["match"] == True)\n',
        'true_positive\n',
        'recall = true_positive / results.shape[0]\n',
        'recall\n',
        'precision = true_positive / predictions.shape[0]\n',
        'precision\n',
        'predictions.shape\n',
        'results["results"].IoU\n',
        'paths\n',
        'path\n',
        'counter+=1\n',
        'counter\n',
        'self.n\n',
        'if counter > self.n:\n    break\n\n',
        'counter = 0\nwhile True:\n    batch = next(iter(ds))\n    paths, im'\
        'ages, targets = batch\n    \n    if not pl_module.device.type=="cpu'\
        '":\n        images = [x.to(pl_module.device) for x in images]\n    '\
        '    \n    predictions = pl_module.model(images)\n    \n    for path'\
        ', image, prediction, target in zip(paths, images, predictions,targe'\
        'ts):\n        counter+=1\n        image = image.permute(1,2,0)\n   '\
        '     image = image.cpu()\n        visualize.plot_prediction_and_tar'\
        'gets(\n            image=image,\n            predictions=prediction'\
        ',\n            targets=target,\n            image_name=path,\n     '\
        '       savedir=self.savedir)\n        plt.close()\n        counter='\
        '+1\n        \n    if counter > self.n:\n        break\n\n',
        'len(ds)\n',
        'images\n',
        'images.shape\n',
        'len(images)\n',
        'images[0]\n',
        'config_path\n',
        'config = utilities.read_config("deepforest_config.yml")\n'],
                                   u'file:/Users/benweinstein/Documents/DeepForest-pytorch/sandbox.py': ['r'\
        'esults.IoU == 0\n',
        'results.IoU != 0\n',
        'results[results.IoU != 0]\n',
        'ground_df.shape\n',
        'predictions.tail()\n',
        'results.head()\n',
        'results.tail()\n',
        'results.groupby("image_path").apply(lambda x: sum(x.match))\n',
        'results.groupby("image_path").apply(lambda x: sum(x.match)).sort_va'\
        'lues()\n',
        'image_path\n',
        'group\n',
        'plot_ground_truth\n',
        'result = evaluate_image(predictions=group, ground_df=plot_ground_tr'\
        'uth, show_plot=True, root_dir=root_dir, savedir=savedir)\n',
        'ground_df\n',
        'predictions=group\n',
        'ground_df=plot_ground_truth\n',
        'show_plot=True\n',
        'plot_names = predictions["image_path"].unique()\n',
        'plot_names\n',
        "predictions['geometry'] = predictions.apply(lambda x: shapely.geome"\
        "try.box(x.xmin,x.ymin,x.xmax,x.ymax), axis=1)\n",
        "predictions = gpd.GeoDataFrame(predictions, geometry='geometry')\n",
        'predictions.head()\n',
        "ground_df['geometry'] = ground_df.apply(lambda x: shapely.geometry."\
        "box(x.xmin,x.ymin,x.xmax,x.ymax), axis=1)\n",
        "ground_df = gpd.GeoDataFrame(ground_df, geometry='geometry')\n",
        'visualize.plot_prediction_dataframe(df=predictions, ground_truth=gr'\
        'ound_df, root_dir=root_dir, savedir=savedir)\n',
        'import numpy as np\n',
        'submission=predictions\n',
        'ground_truth = ground_df\n',
        'submission_shape\n',
        'submission.shape\n',
        'def create_rtree_from_poly(poly_list):\n    # create index\n    ind'\
        'ex = rtree.index.Index(interleaved=True)\n    for idx, geom in enum'\
        'erate(poly_list):\n        index.insert(idx, geom.bounds)\n\n    re'\
        'turn index\n\n',
        'import rtree\n',
        'result = IoU.compute_IoU(ground_df, predictions)\n',
        'ground_truth["truth_id"] = np.arange(ground_truth.shape[0])\n',
        'submission["prediction_id"] = np.arange(submission.shape[0])\n',
        'from IoU import *\n',
        'rtree_index = create_rtree_from_poly(ground_truth.geometry)\n',
        'result = evaluate_image(predictions=group, ground_df=plot_ground_tr'\
        'uth, show_plot=show_plot, root_dir=root_dir, savedir=savedir)\n',
        '_overlap_all\n',
        'def _overlap_(test_poly, truth_polys, rtree_index):\n    """Calcula'\
        'te overlap between one polygon and all ground truth by area"""\n   '\
        ' results = []\n    matched_list = list(rtree_index.intersection(tes'\
        't_poly.geometry.bounds))\n    for index in truth_polys.index:\n    '\
        '    if index in matched_list:\n            #get the original index '\
        'just to be sure\n            intersection_result = test_poly.geomet'\
        'ry.intersection(truth_polys.loc[index].geometry)\n            inter'\
        'section_area = intersection_result.area\n        else:\n           '\
        ' intersection_area = 0 \n        results.append(pd.DataFrame({"pred'\
        'iction_id":[test_poly.prediction_id],"truth_id":[truth_polys.loc[in'\
        'dex].truth_id],"area":intersection_area}))\n    results = pd.concat'\
        '(results)\n \n    return results\n\n',
        'def _overlap_all(test_polys, truth_polys, rtree_index):\n    """Fin'\
        'd area of overlap among all sets of ground truth and prediction"""'\
        '\n    results = []\n    for index, row in test_polys.iterrows():\n'\
        '        result = _overlap_(row, truth_polys, rtree_index)\n        '\
        'results.append(result)\n    results = pd.concat(results, ignore_ind'\
        'ex=True)\n    \n    return results\n\n',
        'from deepforest.IoU import *\n',
        '_overlap_\n',
        'import numpy as np\nimport rtree\nimport pandas as pd\nfrom scipy.o'\
        'ptimize import linear_sum_assignment\n\ndef create_rtree_from_poly('\
        'poly_list):\n    # create index\n    index = rtree.index.Index(inte'\
        'rleaved=True)\n    for idx, geom in enumerate(poly_list):\n        '\
        'index.insert(idx, geom.bounds)\n\n    return index\n\ndef _overlap_'\
        '(test_poly, truth_polys, rtree_index):\n    """Calculate overlap be'\
        'tween one polygon and all ground truth by area"""\n    results = []'\
        '\n    matched_list = list(rtree_index.intersection(test_poly.geomet'\
        'ry.bounds))\n    for index in truth_polys.index:\n        if index '\
        'in matched_list:\n            #get the original index just to be su'\
        're\n            intersection_result = test_poly.geometry.intersecti'\
        'on(truth_polys.loc[index].geometry)\n            intersection_area '\
        '= intersection_result.area\n        else:\n            intersection'\
        '_area = 0 \n        results.append(pd.DataFrame({"prediction_id":[t'\
        'est_poly.prediction_id],"truth_id":[truth_polys.loc[index].truth_id'\
        '],"area":intersection_area}))\n    results = pd.concat(results)\n '\
        '\n    return results\n\ndef _overlap_all(test_polys, truth_polys, r'\
        'tree_index):\n    """Find area of overlap among all sets of ground '\
        'truth and prediction"""\n    results = []\n    for index, row in te'\
        'st_polys.iterrows():\n        result = _overlap_(row, truth_polys, '\
        'rtree_index)\n        results.append(result)\n    results = pd.conc'\
        'at(results, ignore_index=True)\n    \n    return results\n    \ndef'\
        ' _iou_(test_poly, truth_poly):\n    """Intersection over union"""\n'\
        '    intersection_result = test_poly.intersection(truth_poly.geometr'\
        'y)\n    intersection_area = intersection_result.area\n    union_are'\
        'a = test_poly.union(truth_poly.geometry).area\n    return (intersec'\
        'tion_area / union_area)\n\n\n',
        'rtree_index\n',
        'truth_polys.columns\n',
        'ground_truth.iloc\n',
        'ground_truth.iloc[0]\n',
        'submission.iloc[0]\n',
        'overlap_df = _overlap_all(submission, ground_truth, rtree_index)\n',
        'overlap_df\n',
        'truth_polys.geometry.plot()\n',
        'truth_polys.xmin\n',
        'truth_polys.xmax\n',
        'truth_polys.geometry\n',
        'test_polys.geometry\n',
        'result = _overlap_(row, truth_polys, rtree_index)\n',
        'truth_polys.iloc[1]\n',
        'truth_polys=row\n',
        'test_poly=truth_polys\n',
        'rtree_index=rtree_index\n',
        'submission = test_polys\n',
        'ground_truth = truth_polys\n',
        'results = []\nfor index, row in test_polys.iterrows():\n    result '\
        '= _overlap_(truth_polys=row, test_poly=truth_polys, rtree_index=rtr'\
        'ee_index)\n    results.append(result)\nresults = pd.concat(results,'\
        ' ignore_index=True)\n\n',
        'list(rtree_index.intersection(test_poly.geometry.bounds.values))\n',
        'list(rtree_index.intersection(test_poly.geometry.bounds))\n',
        'test_poly.geometry.bounds.values[0]\n',
        'matched_list = list(rtree_index.intersection(test_poly.geometry.bou'\
        'nds.values[0]))\n',
        'overlap_df = _overlap_all(test_polys=submission, truth_polys=ground'\
        '_truth, rtree_index)\n',
        'test_polys\n',
        'for index in truth_polys.index:\n    if index in matched_list:\n   '\
        '     #get the original index just to be sure\n        intersection_'\
        'result = test_poly.geometry.intersection(truth_polys.loc[index].geo'\
        'metry)\n        intersection_area = intersection_result.area\n    e'\
        'lse:\n        intersection_area = 0 \n    results.append(pd.DataFra'\
        'me({"prediction_id":[test_poly.prediction_id],"truth_id":[truth_pol'\
        'ys.loc[index].truth_id],"area":intersection_area}))\nresults = pd.c'\
        'oncat(results)\n\n',
        'test_poly.geometry.bounds.values\n',
        'test_poly.geometry.\n',
        'test_poly.geometry\n',
        'test_poly.geometry.bounds\n',
        'matched_list = list(rtree_index.intersection(test_poly.geometry.bou'\
        'nds))\n',
        'row\n',
        'results = []\nmatched_list = list(rtree_index.intersection(test_pol'\
        'y.geometry.bounds))\nfor index in truth_polys.index:\n    if index '\
        'in matched_list:\n        #get the original index just to be sure\n'\
        '        intersection_result = test_poly.geometry.intersection(truth'\
        '_polys.loc[index].geometry)\n        intersection_area = intersecti'\
        'on_result.area\n    else:\n        intersection_area = 0 \n    resu'\
        'lts.append(pd.DataFrame({"prediction_id":[test_poly.prediction_id],'\
        '"truth_id":[truth_polys.loc[index].truth_id],"area":intersection_ar'\
        'ea}))\nresults = pd.concat(results)\n\n',
        'truth_pols\n',
        'test_polys.iloc[0]\n',
        'test_poly\n',
        'truth_polys.iloc[0]\n',
        'intersection_result = test_poly.geometry.intersection(truth_polys.l'\
        'oc[index].geometry)\n',
        'intersection_result\n',
        'intersection_result.area\n',
        'matched_list\n',
        'index\n',
        'result\n',
        'ground_truth\n',
        'submission\n',
        'truth_polys\n',
        'row_ind\n',
        'matrix = overlap_df.pivot("truth_id","prediction_id","area").values'\
        '\n',
        'matrix\n',
        '#Create IoU dataframe, match those predictions and ground truth, Io'\
        'U = 0 for all others, they will get filtered out\niou_df = [ ]\nfor'\
        ' index, row in ground_truth.iterrows():\n    if index in row_ind:\n'\
        '        matched_id= col_ind[np.where(index == row_ind)[0][0]]\n    '\
        '    score = _iou_(submission[submission.prediction_id == matched_id'\
        '], ground_truth.loc[index])\n    else:\n        score = 0\n        '\
        'matched_id = None\n    iou_df.append(pd.DataFrame({"prediction_id":'\
        '[matched_id],"truth_id":[index],"IoU":score}))\n\niou_df = pd.conca'\
        't(iou_df)\n\n',
        'print(results)\n',
        'results\n',
        'results.IoU\n',
        'results["results"]\n',
        'results["results"].IoU\n'],
                                   u'file:/Users/benweinstein/Documents/DeepForest_Model/sandbox.py': ['i'\
        'mport os\n',
        'os.getcwd()\n',
        'import deepforest\n',
        'import main\n'],
                                   u'file:/Users/benweinstein/Documents/DeepTreeAttention/experiments/Trees/visualize_sheng_results.py': ['t'\
        'est_index = int(image[2][0].split("_")[1])\n',
        'test_index\n',
        'test.columns\n',
        'test.pointID\n',
        'test.pointID.unique()\n',
        'test.point_ID.unique()\n',
        'test.point_id.unique()\n',
        'test = gpd.read_file("/Users/benweinstein/Dropbox/Weecology/Species'\
        '/Sheng/test_32617.shp")\n',
        'test\n']},
                       'launch-id': None,
                       'sel-line': 1839L,
                       'sel-line-start': 81208L,
                       'selection_end': 81208L,
                       'selection_start': 81208L,
                       'zoom': 0L}),
                     ('debug-watch',
                      'wide',
                      1,
                      {'node-states': [],
                       'tree-state': {'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': (0,)}}),
                     ('debug-modules',
                      'wide',
                      1,
                      {}),
                     ('python-shell',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'code-line': '',
                       'first-line': 33L,
                       'folded-linenos': [],
                       'history': {None: ['from deepforest import main\n',
        'm = main.deepforest.load_from_checkpoint("snapshots/hand_annotated.'\
        'pl")\n',
        'm.evaluate(\n    csv_file="/Users/benweinstein/Documents/NeonTreeEv'\
        'aluation/evaluation/RGB/benchmark_annotations.csv",\n    root_dir="'\
        '/Users/benweinstein/Documents/NeonTreeEvaluation/evaluation/RGB/"\n'\
        '           )\n\n',
        'from deepforest import main\nm = main.deepforest.load_from_checkpoi'\
        'nt("snapshots/hand_annotated.pl")\nm.evaluate(\n    csv_file="/User'\
        's/benweinstein/Documents/NeonTreeEvaluation/evaluation/RGB/benchmar'\
        'k_annotations.csv",\n    root_dir="/Users/benweinstein/Documents/Ne'\
        'onTreeEvaluation/evaluation/RGB/"\n           )\n\n',
        '6/6000\n',
        'w\n',
        'counter = 0 \n',
        'counter+=1\n',
        'counter\n',
        'import numpy as no\n',
        'import numpy as np\n',
        'np.arange(0,10,1)\n']},
                       'launch-id': None,
                       'sel-line': 54L,
                       'sel-line-start': 2866L,
                       'selection_end': 2866L,
                       'selection_start': 2866L,
                       'zoom': 0L}),
                     ('bookmarks',
                      'wide',
                      1,
                      {}),
                     ('messages',
                      'wide',
                      2,
                      {}),
                     ('os-command',
                      'wide',
                      1,
                      {})],
        'primary_view_state': {'editor_states': ({'bookmarks': ([[loc('../../opt/miniconda3/envs/DeepForest_pytorch/lib/python3.8/site-packages/torchvision/models/detection/retinanet.py'),
        {'attrib-starts': [('RetinaNet|0|',
                            243),
                           ('RetinaNet|0|.forward|0|',
                            483)],
         'code-line': '        images, targets = self.transform(images, targ'\
                      'ets)\n',
         'first-line': 501L,
         'folded-linenos': [],
         'sel-line': 521L,
         'sel-line-start': 22788L,
         'selection_end': 22788L,
         'selection_start': 22788L,
         'zoom': 0L},
        1614989741.485989],
        [loc('../../opt/miniconda3/envs/DeepForest_pytorch/lib/python3.8/site-packages/torch/nn/modules/module.py'),
         {'attrib-starts': [('Module|0|',
                             177),
                            ('Module|0|._call_impl|0|',
                             714)],
          'code-line': '            result = self.forward(*input, **kwargs)'\
                       '\n',
          'first-line': 706L,
          'folded-linenos': [],
          'sel-line': 726L,
          'sel-line-start': 29761L,
          'selection_end': 29761L,
          'selection_start': 29761L,
          'zoom': 0L},
         1614989742.14702],
        [loc('deepforest/callbacks.py'),
         {'attrib-starts': [('images_callback|0|',
                             16),
                            ('images_callback|0|.log_images|0|',
                             42)],
          'code-line': '                visualize.plot_prediction_and_target'\
                       's(\n',
          'first-line': 47L,
          'folded-linenos': [],
          'sel-line': 71L,
          'sel-line-start': 2642L,
          'selection_end': 2696L,
          'selection_start': 2696L,
          'zoom': 0L},
         1614989780.431673],
        [loc('deepforest/main.py'),
         {'attrib-starts': [('deepforest|0|',
                             18),
                            ('deepforest|0|.load_dataset|0|',
                             93)],
          'code-line': '                              transforms=dataset.get'\
                       '_transform(augment=augment))\n',
          'first-line': 10L,
          'folded-linenos': [],
          'sel-line': 108L,
          'sel-line-start': 4172L,
          'selection_end': 4234L,
          'selection_start': 4213L,
          'zoom': 0L},
         1614989793.20023],
        [loc('deepforest/main.py'),
         {'attrib-starts': [('deepforest|0|',
                             18),
                            ('deepforest|0|.load_dataset|0|',
                             93)],
          'code-line': '                              transforms=dataset.get'\
                       '_transform(augment=augment))\n',
          'first-line': 90L,
          'folded-linenos': [],
          'sel-line': 108L,
          'sel-line-start': 4172L,
          'selection_end': 4234L,
          'selection_start': 4213L,
          'zoom': 0L},
         1614989794.590296],
        [loc('deepforest/main.py'),
         {'attrib-starts': [('deepforest|0|',
                             18),
                            ('deepforest|0|.load_dataset|0|',
                             93)],
          'code-line': '                              transforms=dataset.get'\
                       '_transform(augment=augment))\n',
          'first-line': 90L,
          'folded-linenos': [],
          'sel-line': 108L,
          'sel-line-start': 4172L,
          'selection_end': 4234L,
          'selection_start': 4221L,
          'zoom': 0L},
         1614989797.423286],
        [loc('deepforest/main.py'),
         {'attrib-starts': [('deepforest|0|',
                             18),
                            ('deepforest|0|.load_dataset|0|',
                             93)],
          'code-line': '                              transforms=dataset.get'\
                       '_transform(augment=augment))\n',
          'first-line': 90L,
          'folded-linenos': [],
          'sel-line': 108L,
          'sel-line-start': 4172L,
          'selection_end': 4220L,
          'selection_start': 4213L,
          'zoom': 0L},
         1614989800.851182],
        [loc('deepforest/main.py'),
         {'attrib-starts': [('deepforest|0|',
                             18),
                            ('deepforest|0|.load_dataset|0|',
                             93)],
          'code-line': '                              transforms=dataset.get'\
                       '_transform(augment=augment))\n',
          'first-line': 87L,
          'folded-linenos': [],
          'sel-line': 108L,
          'sel-line-start': 4172L,
          'selection_end': 4220L,
          'selection_start': 4213L,
          'zoom': 0L},
         1614989818.910785],
        [loc('deepforest/main.py'),
         {'attrib-starts': [('deepforest|0|',
                             18),
                            ('deepforest|0|.predict_file|0|',
                             164)],
          'code-line': '        """Create a dataset and predict entire annot'\
                       'ation file\n',
          'first-line': 147L,
          'folded-linenos': [],
          'sel-line': 165L,
          'sel-line-start': 6860L,
          'selection_end': 6887L,
          'selection_start': 6880L,
          'zoom': 0L},
         1614989819.756587],
        [loc('deepforest/main.py'),
         {'attrib-starts': [('deepforest|0|',
                             18),
                            ('deepforest|0|.training_step|0|',
                             233)],
          'code-line': '        """Train on a loaded dataset\n',
          'first-line': 216L,
          'folded-linenos': [],
          'sel-line': 234L,
          'sel-line-start': 9833L,
          'selection_end': 9869L,
          'selection_start': 9862L,
          'zoom': 0L},
         1614989820.552967],
        [loc('deepforest/main.py'),
         {'attrib-starts': [('deepforest|0|',
                             18),
                            ('deepforest|0|.validation_step|0|',
                             245)],
          'code-line': '        """Train on a loaded dataset\n',
          'first-line': 228L,
          'folded-linenos': [],
          'sel-line': 246L,
          'sel-line-start': 10206L,
          'selection_end': 10242L,
          'selection_start': 10235L,
          'zoom': 0L},
         1614989821.144641],
        [loc('deepforest/main.py'),
         {'attrib-starts': [],
          'code-line': 'from deepforest import dataset\n',
          'first-line': 6L,
          'folded-linenos': [],
          'sel-line': 11L,
          'sel-line-start': 209L,
          'selection_end': 239L,
          'selection_start': 232L,
          'zoom': 0L},
         1614989823.63556],
        [loc('deepforest/main.py'),
         {'attrib-starts': [('deepforest|0|',
                             18),
                            ('deepforest|0|.load_dataset|0|',
                             93)],
          'code-line': '        """Create a tree dataset for inference\n',
          'first-line': 76L,
          'folded-linenos': [],
          'sel-line': 94L,
          'sel-line-start': 3446L,
          'selection_end': 3478L,
          'selection_start': 3471L,
          'zoom': 0L},
         1614989827.276582],
        [loc('deepforest/dataset.py'),
         {'attrib-starts': [('TreeDataset|0|',
                             31),
                            ('TreeDataset|0|.__init__|0|',
                             32)],
          'code-line': '        self.image_names = self.annotations.image_pa'\
                       'th.unique()\n',
          'first-line': 16L,
          'folded-linenos': [],
          'sel-line': 43L,
          'sel-line-start': 1398L,
          'selection_end': 1452L,
          'selection_start': 1442L,
          'zoom': 0L},
         1614989833.709883],
        [loc('deepforest/main.py'),
         {'attrib-starts': [('deepforest|0|',
                             18),
                            ('deepforest|0|.load_dataset|0|',
                             93)],
          'code-line': '                              transforms=dataset.get'\
                       '_transform(augment=augment))\n',
          'first-line': 103L,
          'folded-linenos': [],
          'sel-line': 108L,
          'sel-line-start': 4172L,
          'selection_end': 4251L,
          'selection_start': 4213L,
          'zoom': 0L},
         1614989842.404045],
        [loc('deepforest/callbacks.py'),
         {'attrib-starts': [('images_callback|0|',
                             16),
                            ('images_callback|0|.log_images|0|',
                             42)],
          'code-line': '                              root_dir=self.root_dir'\
                       ', transforms=dataset.get_transform(augment=False))\n',
          'first-line': 41L,
          'folded-linenos': [],
          'sel-line': 45L,
          'sel-line-start': 1754L,
          'selection_end': 1854L,
          'selection_start': 1854L,
          'zoom': 0L},
         1614993044.654399],
        [loc('tests/test_preprocess.py'),
         {'attrib-starts': [('test_split_size_error|0|',
                             127)],
          'code-line': '                                                   c'\
                       'onfig["patch_overlap"])',
          'first-line': 130L,
          'folded-linenos': [],
          'sel-line': 132L,
          'sel-line-start': 4614L,
          'selection_end': 4643L,
          'selection_start': 4643L,
          'zoom': 0L},
         1614993044.694983],
        [loc('tests/test_preprocess.py'),
         {'attrib-starts': [('test_split_raster_empty|0|',
                             87)],
          'code-line': 'def test_split_raster_empty(config):\n',
          'first-line': 74L,
          'folded-linenos': [],
          'sel-line': 87L,
          'sel-line-start': 3062L,
          'selection_end': 3098L,
          'selection_start': 3062L,
          'zoom': 0L},
         1614993045.261148],
        [loc('deepforest/utilities.py'),
         {'attrib-starts': [('read_config|0|',
                             19)],
          'code-line': '        raise FileNotFoundError("There is no config '\
                       'at {}, yields {}".format(\n',
          'first-line': 13L,
          'folded-linenos': [],
          'sel-line': 25L,
          'sel-line-start': 432L,
          'selection_end': 432L,
          'selection_start': 432L,
          'zoom': 0L},
         1614993061.326566],
        [loc('tests/test_preprocess.py'),
         {'attrib-starts': [('test_split_raster_empty|0|',
                             87)],
          'code-line': 'def test_split_raster_empty(config):\n',
          'first-line': 74L,
          'folded-linenos': [],
          'sel-line': 87L,
          'sel-line-start': 3062L,
          'selection_end': 3098L,
          'selection_start': 3062L,
          'zoom': 0L},
         1614993061.343996]],
        20),
        'current-loc': loc('tests/test_preprocess.py'),
        'editor-state-list': [(loc('deepforest/callbacks.py'),
                               {'attrib-starts': [('images_callback|0|',
        16),
        ('images_callback|0|.log_images|0|',
         42)],
                                'code-line': '                              '\
        'root_dir=self.root_dir, transforms=dataset.get_transform(augment=Fa'\
        'lse))\n',
                                'first-line': 41L,
                                'folded-linenos': [],
                                'sel-line': 45L,
                                'sel-line-start': 1754L,
                                'selection_end': 1854L,
                                'selection_start': 1854L,
                                'zoom': 0L}),
                              (loc('deepforest/dataset.py'),
                               {'attrib-starts': [('TreeDataset|0|',
        31),
        ('TreeDataset|0|.__init__|0|',
         32)],
                                'code-line': '        self.image_names = sel'\
        'f.annotations.image_path.unique()\n',
                                'first-line': 16L,
                                'folded-linenos': [],
                                'sel-line': 43L,
                                'sel-line-start': 1398L,
                                'selection_end': 1452L,
                                'selection_start': 1442L,
                                'zoom': 0L}),
                              (loc('../NeonTreeEvaluation_python/src/eval.py'),
                               {'attrib-starts': [('evaluate_image_crowns|0|',
        8)],
                                'code-line': '        path: path to .csv on '\
        'disk\n',
                                'first-line': 60L,
                                'folded-linenos': [],
                                'sel-line': 13L,
                                'sel-line-start': 439L,
                                'selection_end': 473L,
                                'selection_start': 473L,
                                'zoom': 0L}),
                              (loc('deepforest/main.py'),
                               {'attrib-starts': [('deepforest|0|',
        18),
        ('deepforest|0|.load_dataset|0|',
         93)],
                                'code-line': '                              '\
        'transforms=dataset.get_transform(augment=augment))\n',
                                'first-line': 103L,
                                'folded-linenos': [],
                                'sel-line': 108L,
                                'sel-line-start': 4172L,
                                'selection_end': 4251L,
                                'selection_start': 4213L,
                                'zoom': 0L}),
                              (loc('../../opt/miniconda3/envs/DeepForest_pytorch/lib/python3.8/site-packages/torch/nn/modules/module.py'),
                               {'attrib-starts': [('Module|0|',
        177),
        ('Module|0|._call_impl|0|',
         714)],
                                'code-line': '            result = self.forw'\
        'ard(*input, **kwargs)\n',
                                'first-line': 706L,
                                'folded-linenos': [],
                                'sel-line': 726L,
                                'sel-line-start': 29761L,
                                'selection_end': 29761L,
                                'selection_start': 29761L,
                                'zoom': 0L}),
                              (loc('../../opt/miniconda3/envs/DeepForest_pytorch/lib/python3.8/site-packages/torchvision/models/detection/retinanet.py'),
                               {'attrib-starts': [('RetinaNet|0|',
        243),
        ('RetinaNet|0|.forward|0|',
         483)],
                                'code-line': '        images, targets = self'\
        '.transform(images, targets)\n',
                                'first-line': 501L,
                                'folded-linenos': [],
                                'sel-line': 521L,
                                'sel-line-start': 22788L,
                                'selection_end': 22788L,
                                'selection_start': 22788L,
                                'zoom': 0L}),
                              (loc('tests/test_callbacks.py'),
                               {'attrib-starts': [('test_log_images|0|',
        25)],
                                'code-line': 'def test_log_images(m, tmpdir)'\
        ':\n',
                                'first-line': 11L,
                                'folded-linenos': [],
                                'sel-line': 25L,
                                'sel-line-start': 670L,
                                'selection_end': 701L,
                                'selection_start': 670L,
                                'zoom': 0L}),
                              (loc('tests/test_main.py'),
                               {'attrib-starts': [('test_train_callbacks|0|',
        121)],
                                'code-line': 'def test_train_callbacks(m):\n',
                                'first-line': 109L,
                                'folded-linenos': [],
                                'sel-line': 121L,
                                'sel-line-start': 4382L,
                                'selection_end': 4410L,
                                'selection_start': 4382L,
                                'zoom': 0L}),
                              (loc('tests/test_preprocess.py'),
                               {'attrib-starts': [('config|0|',
        16)],
                                'code-line': '    config = utilities.read_co'\
        'nfig("deepforest_config.yml")\n',
                                'first-line': 3L,
                                'folded-linenos': [],
                                'sel-line': 17L,
                                'sel-line-start': 269L,
                                'selection_end': 329L,
                                'selection_start': 269L,
                                'zoom': 0L}),
                              (loc('../DeepForest_Model/train.py'),
                               {'attrib-starts': [],
                                'code-line': 'im_callback = images_callback('\
        'csv_file=m.config["validation"]["csv_file"], root_dir=m.config["val'\
        'idation"]["root_dir"], savedir=savedir, n=1)\n',
                                'first-line': 14L,
                                'folded-linenos': [],
                                'sel-line': 29L,
                                'sel-line-start': 833L,
                                'selection_end': 851L,
                                'selection_start': 851L,
                                'zoom': 0L}),
                              (loc('../../opt/miniconda3/envs/DeepForest_pytorch/lib/python3.8/site-packages/torchvision/models/detection/transform.py'),
                               {'attrib-starts': [('GeneralizedRCNNTransform'\
        '|0|',
        57),
        ('GeneralizedRCNNTransform|0|.forward|0|',
         78)],
                                'code-line': '            if image.dim() != '\
        '3:\n',
                                'first-line': 80L,
                                'folded-linenos': [],
                                'sel-line': 100L,
                                'sel-line-start': 3826L,
                                'selection_end': 3826L,
                                'selection_start': 3826L,
                                'zoom': 0L}),
                              (loc('deepforest/utilities.py'),
                               {'attrib-starts': [('read_config|0|',
        19)],
                                'code-line': '        raise FileNotFoundErro'\
        'r("There is no config at {}, yields {}".format(\n',
                                'first-line': 13L,
                                'folded-linenos': [],
                                'sel-line': 25L,
                                'sel-line-start': 432L,
                                'selection_end': 432L,
                                'selection_start': 432L,
                                'zoom': 0L})],
        'has-focus': False,
        'locked': False},
        [loc('deepforest/callbacks.py'),
         loc('deepforest/dataset.py'),
         loc('../NeonTreeEvaluation_python/src/eval.py'),
         loc('deepforest/main.py'),
         loc('../../opt/miniconda3/envs/DeepForest_pytorch/lib/python3.8/site-packages/torch/nn/modules/module.py'),
         loc('../../opt/miniconda3/envs/DeepForest_pytorch/lib/python3.8/site-packages/torchvision/models/detection/retinanet.py'),
         loc('tests/test_callbacks.py'),
         loc('tests/test_main.py'),
         loc('tests/test_preprocess.py'),
         loc('../DeepForest_Model/train.py'),
         loc('../../opt/miniconda3/envs/DeepForest_pytorch/lib/python3.8/site-packages/torchvision/models/detection/transform.py'),
         loc('deepforest/utilities.py')]),
                               'open_files': [u'../NeonTreeEvaluation_python/src/eval.py',
        u'tests/test_main.py',
        u'../DeepForest_Model/train.py',
        u'tests/test_callbacks.py',
        u'deepforest/dataset.py',
        u'deepforest/main.py',
        u'deepforest/callbacks.py',
        u'tests/test_preprocess.py']},
        'saved_notebook_display': None,
        'split_percents': {0: 0.3005219985085757},
        'splits': 2,
        'tab_location': 'top',
        'traversal_pos': ((1,
                           2),
                          1614993048.838953),
        'user_data': {}},
                 'saved_notebook_display': None,
                 'split_percents': {0: 0.5},
                 'splits': 2,
                 'tab_location': 'left',
                 'traversal_pos': ((0,
                                    0),
                                   1607965912.374172),
                 'user_data': {}},
        'window-alloc': (0,
                         23,
                         1792,
                         1082)}]}
guimgr.recent-documents = [loc('tests/test_preprocess.py'),
                           loc('deepforest/utilities.py'),
                           loc('deepforest/callbacks.py'),
                           loc('deepforest/main.py'),
                           loc('deepforest/dataset.py'),
                           loc('../../opt/miniconda3/envs/DeepForest_pytorch/lib/python3.8/site-packages/torch/nn/modules/module.py'),
                           loc('../../opt/miniconda3/envs/DeepForest_pytorch/lib/python3.8/site-packages/torchvision/models/detection/retinanet.py'),
                           loc('../../opt/miniconda3/envs/DeepForest_pytorch/lib/python3.8/site-packages/torchvision/models/detection/transform.py'),
                           loc('tests/test_callbacks.py'),
                           loc('../DeepForest_Model/train.py'),
                           loc('tests/test_main.py'),
                           loc('../NeonTreeEvaluation_python/src/eval.py')]
guimgr.visual-state = {loc('../../../../Applications/WingPro.app/Contents/Resources/src/testing/runners/run_pytest_xml.py'): {'a'\
        'ttrib-starts': [('RunInSingleDir|0|',
                          456)],
        'code-line': '        import pytest\n',
        'first-line': 454L,
        'folded-linenos': [],
        'sel-line': 466L,
        'sel-line-start': 16384L,
        'selection_end': 16405L,
        'selection_start': 16384L,
        'zoom': 0L},
                       loc('.travis.yml'): {'attrib-starts': [],
        'code-line': 'env: TRAVIS=true\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 16L,
        'sel-line-start': 460L,
        'selection_end': 476L,
        'selection_start': 476L,
        'zoom': 0L},
                       loc('_config.yml'): {'attrib-starts': [],
        'code-line': 'theme: jekyll-theme-slate',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('azure-pipelines.yml'): {'attrib-starts': [],
        'code-line': '  - script: |\n',
        'first-line': 20L,
        'folded-linenos': [],
        'sel-line': 33L,
        'sel-line-start': 799L,
        'selection_end': 812L,
        'selection_start': 812L,
        'zoom': 0L},
                       loc('deepforest/IoU.py'): {'attrib-starts': [('comput'\
        'e_IoU|0|',
        49)],
        'code-line': '        iou_df.append(pd.DataFrame({"prediction_id":[m'\
                     'atched_id],"truth_id":[index],"IoU":score}))\n',
        'first-line': 47L,
        'folded-linenos': [],
        'sel-line': 80L,
        'sel-line-start': 3180L,
        'selection_end': 3225L,
        'selection_start': 3225L,
        'zoom': 0L},
                       loc('deepforest/callbacks.py'): {'attrib-starts': [('i'\
        'mages_callback|0|',
        13),
        ('images_callback|0|.__init__|0|',
         31)],
        'code-line': '    def __init__(self, csv_file, root_dir, savedir, n='\
                     '2, every_n_epochs=5):\n',
        'first-line': 9L,
        'folded-linenos': [],
        'sel-line': 31L,
        'sel-line-start': 1273L,
        'selection_end': 1344L,
        'selection_start': 1344L,
        'zoom': 0L},
                       loc('deepforest/data/2019_YELL_2_528000_4978000_image_crop2.xml'): {'a'\
        'ttrib-starts': [],
        'code-line': '    <filename>2019_YELL_2_528000_4978000_image_crop2.p'\
                     'ng</filename>\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 2L,
        'sel-line-start': 39L,
        'selection_end': 95L,
        'selection_start': 95L,
        'zoom': 0L},
                       loc('deepforest/data/2019_YELL_2_541000_4977000_image_crop.tif'): {'a'\
        'ttrib-starts': [],
        'code-line': 'MM\0*\0\r',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('deepforest/data/2019_YELL_2_541000_4977000_image_crop.xml'): {'a'\
        'ttrib-starts': [],
        'code-line': '    <filename>2019_YELL_2_541000_4977000_image_crop.pn'\
                     'g</filename>\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 2L,
        'sel-line-start': 39L,
        'selection_end': 94L,
        'selection_start': 94L,
        'zoom': 0L},
                       loc('deepforest/data/OSBS_029.xml'): {'attrib-starts': [],
        'code-line': '        <height>400</height>\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 5L,
        'sel-line-start': 114L,
        'selection_end': 142L,
        'selection_start': 142L,
        'zoom': 0L},
                       loc('deepforest/data/deepforest_config.yml'): {'attri'\
        'b-starts': [],
        'code-line': '### \n',
        'first-line': 12L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('deepforest/data/eval_example.csv'): {'attrib-sta'\
        'rts': [],
        'code-line': 'image_path,xmin,ymin,xmax,ymax,label\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('deepforest/data/example.csv'): {'attrib-starts': [],
        'code-line': 'image_path,xmin,ymin,xmax,ymax,label\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('deepforest/dataset.py'): {'attrib-starts': [('Tr'\
        'eeDataset|0|',
        31),
        ('TreeDataset|0|.__init__|0|',
         32)],
        'code-line': '        self.image_names = self.annotations.image_path'\
                     '.unique()\n',
        'first-line': 16L,
        'folded-linenos': [],
        'sel-line': 43L,
        'sel-line-start': 1398L,
        'selection_end': 1452L,
        'selection_start': 1442L,
        'zoom': 0L},
                       loc('deepforest/deepforest.py'): {'attrib-starts': [],
        'code-line': '',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('deepforest/engine.py'): {'attrib-starts': [],
        'code-line': 'from coco_eval import CocoEvaluator\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 10L,
        'sel-line-start': 256L,
        'selection_end': 291L,
        'selection_start': 291L,
        'zoom': 0L},
                       loc('deepforest/evaluate.py'): {'attrib-starts': [('e'\
        'valuate|0|',
        45)],
        'code-line': '    return {"results":results,"precision":precision, "'\
                     'recall":recall}',
        'first-line': 54L,
        'folded-linenos': [],
        'sel-line': 82L,
        'sel-line-start': 3514L,
        'selection_end': 3583L,
        'selection_start': 3583L,
        'zoom': 0L},
                       loc('deepforest/main.py'): {'attrib-starts': [('deepf'\
        'orest|0|',
        18),
        ('deepforest|0|.validation_end|0|',
         303)],
        'code-line': "        comet_logs = {'val_loss': avg_loss}\n",
        'first-line': 303L,
        'folded-linenos': [],
        'sel-line': 305L,
        'sel-line-start': 12438L,
        'selection_end': 12481L,
        'selection_start': 12481L,
        'zoom': 0L},
                       loc('deepforest/model.py'): {'attrib-starts': [('crea'\
        'te_model|0|',
        24)],
        'code-line': '    model.score_thresh = score_thresh\n',
        'first-line': 16L,
        'folded-linenos': [],
        'sel-line': 28L,
        'sel-line-start': 1120L,
        'selection_end': 1157L,
        'selection_start': 1145L,
        'zoom': 0L},
                       loc('deepforest/predict.py'): {'attrib-starts': [('pr'\
        'edict_file|0|',
        49)],
        'code-line': 'def predict_file(model,csv_file,root_dir, savedir, dev'\
                     'ice):\n',
        'first-line': 81L,
        'folded-linenos': [],
        'sel-line': 49L,
        'sel-line-start': 1585L,
        'selection_end': 1601L,
        'selection_start': 1589L,
        'zoom': 0L},
                       loc('deepforest/preprocess.py'): {'attrib-starts': [('p'\
        'reprocess_image|0|',
        14)],
        'code-line': 'def preprocess_image(image):   \n',
        'first-line': 188L,
        'folded-linenos': [],
        'sel-line': 14L,
        'sel-line-start': 299L,
        'selection_end': 319L,
        'selection_start': 303L,
        'zoom': 0L},
                       loc('deepforest/retinanet_train.py'): {'attrib-starts': [],
        'code-line': '',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('deepforest/train.py'): {'attrib-starts': [('trai'\
        'n|0|',
        2)],
        'code-line': '        config: a deepforest config object\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 7L,
        'sel-line-start': 226L,
        'selection_end': 268L,
        'selection_start': 268L,
        'zoom': 0L},
                       loc('deepforest/training.py'): {'attrib-starts': [('r'\
        'un|0|',
        52)],
        'code-line': '    \n',
        'first-line': 79L,
        'folded-linenos': [],
        'sel-line': 90L,
        'sel-line-start': 3553L,
        'selection_end': 3557L,
        'selection_start': 3557L,
        'zoom': 0L},
                       loc('deepforest/training_utils.py'): {'attrib-starts': [('M'\
        'etricLogger|0|',
        144),
        ('MetricLogger|0|.synchronize_between_processes|0|',
         172)],
        'code-line': '        for meter in self.meters.values():\n',
        'first-line': 144L,
        'folded-linenos': [],
        'sel-line': 173L,
        'sel-line-start': 5085L,
        'selection_end': 5121L,
        'selection_start': 5121L,
        'zoom': 0L},
                       loc('deepforest/transforms.py'): {'attrib-starts': [('T'\
        'oTensor|0|',
        29),
        ('ToTensor|0|.__call__|0|',
         30)],
        'code-line': '        image = F.to_tensor(image).float()\n',
        'first-line': 13L,
        'folded-linenos': [],
        'sel-line': 31L,
        'sel-line-start': 904L,
        'selection_end': 945L,
        'selection_start': 945L,
        'zoom': 0L},
                       loc('deepforest/utilities.py'): {'attrib-starts': [('p'\
        'roject_boxes|0|',
        236)],
        'code-line': 'def project_boxes(df, root_dir, transform = True):\n',
        'first-line': 229L,
        'folded-linenos': [],
        'sel-line': 236L,
        'sel-line-start': 7822L,
        'selection_end': 7839L,
        'selection_start': 7826L,
        'zoom': 0L},
                       loc('deepforest/visualize.py'): {'attrib-starts': [('p'\
        'lot_prediction_and_targets|0|',
        26)],
        'code-line': '    plot, ax = plot_predictions(image, prediction_df)'\
                     '\n',
        'first-line': 22L,
        'folded-linenos': [],
        'sel-line': 29L,
        'sel-line-start': 1117L,
        'selection_end': 1168L,
        'selection_start': 1168L,
        'zoom': 0L},
                       loc('deepforest_config.yml'): {'attrib-starts': [],
        'code-line': 'score_thresh: 0.1\n',
        'first-line': 18L,
        'folded-linenos': [],
        'sel-line': 11L,
        'sel-line-start': 206L,
        'selection_end': 223L,
        'selection_start': 223L,
        'zoom': 0L},
                       loc('docs/conf.py'): {'attrib-starts': [],
        'code-line': '#!/usr/bin/env python\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('docs/training.md'): {'attrib-starts': [],
        'code-line': '# Training models\n',
        'first-line': 51L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('environment.yml'): {'attrib-starts': [],
        'code-line': '  - pytorch_lightning\n',
        'first-line': 3L,
        'folded-linenos': [],
        'sel-line': 18L,
        'sel-line-start': 235L,
        'selection_end': 256L,
        'selection_start': 256L,
        'zoom': 0L},
                       loc('evaluate.py'): {'attrib-starts': [],
        'code-line': 'import torch\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 12L,
        'selection_start': 12L,
        'zoom': 0L},
                       loc('main.py'): {'attrib-starts': [('deepforest|0|',
        7),
        ('deepforest|0|.__init__|0|',
         10)],
        'code-line': '        # if not use installed.\n',
        'first-line': 120L,
        'folded-linenos': [],
        'sel-line': 12L,
        'sel-line-start': 413L,
        'selection_end': 444L,
        'selection_start': 444L,
        'zoom': 0L},
                       loc('requirements.txt'): {'attrib-starts': [],
        'code-line': 'tqdm\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 22L,
        'sel-line-start': 225L,
        'selection_end': 229L,
        'selection_start': 229L,
        'zoom': 0L},
                       loc('sandbox.py'): {'attrib-starts': [],
        'code-line': 'print(results)',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 7L,
        'sel-line-start': 327L,
        'selection_end': 341L,
        'selection_start': 341L,
        'zoom': 0L},
                       loc('setup.py'): {'attrib-starts': [],
        'code-line': '      install_requires=[\n',
        'first-line': 47L,
        'folded-linenos': [],
        'sel-line': 54L,
        'sel-line-start': 1699L,
        'selection_end': 1723L,
        'selection_start': 1723L,
        'zoom': 0L},
                       loc('tests/test_IoU.py'): {'attrib-starts': [],
        'code-line': '#Test IoU\n',
        'first-line': 13L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 1181L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('tests/test_callbacks.py'): {'attrib-starts': [],
        'code-line': 'from deepforest import get_data\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 7L,
        'sel-line-start': 114L,
        'selection_end': 114L,
        'selection_start': 114L,
        'zoom': 0L},
                       loc('tests/test_data.py'): {'attrib-starts': [],
        'code-line': '# test data locations and existance\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('tests/test_dataset.py'): {'attrib-starts': [],
        'code-line': '#test dataset model\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 19L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('tests/test_deepforest.py'): {'attrib-starts': [],
        'code-line': '',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('tests/test_environment.py'): {'attrib-starts': [('t'\
        'est_environment|0|',
        3)],
        'code-line': '',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 6L,
        'sel-line-start': 123L,
        'selection_end': 123L,
        'selection_start': 123L,
        'zoom': 0L},
                       loc('tests/test_evaluate.py'): {'attrib-starts': [('t'\
        'est_evaluate_image|0|',
        17)],
        'code-line': '    \n',
        'first-line': 15L,
        'folded-linenos': [],
        'sel-line': 21L,
        'sel-line-start': 510L,
        'selection_end': 514L,
        'selection_start': 514L,
        'zoom': 0L},
                       loc('tests/test_keras_retinanet.py'): {'attrib-starts': [],
        'code-line': '# test loading of keras retinanet\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 33L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('tests/test_main.py'): {'attrib-starts': [('test_'\
        'train_callbacks|0|',
        121)],
        'code-line': 'def test_train_callbacks(m):\n',
        'first-line': 18L,
        'folded-linenos': [],
        'sel-line': 121L,
        'sel-line-start': 4382L,
        'selection_end': 4410L,
        'selection_start': 4382L,
        'zoom': 0L},
                       loc('tests/test_model.py'): {'attrib-starts': [('test'\
        '_create_model|0|',
        11)],
        'code-line': '    retinanet_model = model.create_model(num_classes=2'\
                     ',nms_thresh=0.1, score_thresh=0.2)\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 12L,
        'sel-line-start': 260L,
        'selection_end': 347L,
        'selection_start': 347L,
        'zoom': 0L},
                       loc('tests/test_preprocess.py'): {'attrib-starts': [('t'\
        'est_split_large_tile|0|',
        134)],
        'code-line': 'def test_split_large_tile(tmpdir):\n',
        'first-line': 132L,
        'folded-linenos': [],
        'sel-line': 134L,
        'sel-line-start': 4691L,
        'selection_end': 4720L,
        'selection_start': 4720L,
        'zoom': 0L},
                       loc('tests/test_tfrecords.py'): {'attrib-starts': [],
        'code-line': '',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('tests/test_utilities.py'): {'attrib-starts': [('t'\
        'est_xml_to_annotations|0|',
        18)],
        'code-line': '    #release_tag, weights = utilities.use_release()\n',
        'first-line': 18L,
        'folded-linenos': [],
        'sel-line': 30L,
        'sel-line-start': 678L,
        'selection_end': 729L,
        'selection_start': 729L,
        'zoom': 0L},
                       loc('tests/test_visualize.py'): {'attrib-starts': [('t'\
        'est_plot_predictions_and_targets|0|',
        36)],
        'code-line': '    for path, image, target, prediction in zip(paths, '\
                     'images, targets, predictions):\n',
        'first-line': 34L,
        'folded-linenos': [],
        'sel-line': 42L,
        'sel-line-start': 1284L,
        'selection_end': 1349L,
        'selection_start': 1349L,
        'zoom': 0L},
                       loc('../DeepForest/deepforest/data/eval_example.csv'): {'a'\
        'ttrib-starts': [],
        'code-line': 'image_path,xmin,ymin,xmax,ymax,label\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../DeepForest/deepforest/deepforest.py'): {'attr'\
        'ib-starts': [],
        'code-line': 'from deepforest.retinanet_train import main as retinan'\
                     'et_train\n',
        'first-line': 20L,
        'folded-linenos': [],
        'sel-line': 26L,
        'sel-line-start': 631L,
        'selection_end': 662L,
        'selection_start': 662L,
        'zoom': 0L},
                       loc('../DeepForest/tests/test_deepforest.py'): {'attr'\
        'ib-starts': [],
        'code-line': 'from .conftest import download_release\n',
        'first-line': 52L,
        'folded-linenos': [],
        'sel-line': 19L,
        'sel-line-start': 364L,
        'selection_end': 402L,
        'selection_start': 386L,
        'zoom': 0L},
                       loc('../DeepForest_Model/callbacks.py'): {'attrib-sta'\
        'rts': [('comet_callbacks|0|',
                 4),
                ('comet_callbacks|0|.on_epoch_end|0|',
                 19)],
        'code-line': '        \n',
        'first-line': 2L,
        'folded-linenos': [],
        'sel-line': 24L,
        'sel-line-start': 803L,
        'selection_end': 811L,
        'selection_start': 811L,
        'zoom': 0L},
                       loc('../DeepForest_Model/deepforest_config.yml'): {'a'\
        'ttrib-starts': [],
        'code-line': '    iou_threshold: 0.4\n',
        'first-line': 13L,
        'folded-linenos': [],
        'sel-line': 31L,
        'sel-line-start': 909L,
        'selection_end': 931L,
        'selection_start': 931L,
        'zoom': 0L},
                       loc('../DeepForest_Model/example_prediction.py'): {'a'\
        'ttrib-starts': [],
        'code-line': 'm.model = torch.load("snapshots/hand_annotated_model.p'\
                     't", map_location = torch.device("cpu"))\n',
        'first-line': 3L,
        'folded-linenos': [],
        'sel-line': 7L,
        'sel-line-start': 171L,
        'selection_end': 264L,
        'selection_start': 264L,
        'zoom': 0L},
                       loc('../DeepForest_Model/pretraining.py'): {'attrib-s'\
        'tarts': [],
        'code-line': 'from callbacks import comet_callbacks\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 1L,
        'sel-line-start': 28L,
        'selection_end': 65L,
        'selection_start': 50L,
        'zoom': 0L},
                       loc('../DeepForest_Model/src/crops.py'): {'attrib-sta'\
        'rts': [('shapefile_to_annotations|0|',
                 16)],
        'code-line': 'def shapefile_to_annotations(shapefile, rgb, savedir="'\
                     '."):\n',
        'first-line': 47L,
        'folded-linenos': [],
        'sel-line': 16L,
        'sel-line-start': 326L,
        'selection_end': 2134L,
        'selection_start': 326L,
        'zoom': 0L},
                       loc('../DeepForest_Model/tests/test_generate.py'): {'a'\
        'ttrib-starts': [('test_shapefile_to_annotations|0|',
                          6)],
        'code-line': '    df = crops.shapefile_to_annotations(shapefile="/Us'\
                     'ers/benweinstein/Downloads/temp_training/2019_OSBS_5_4'\
                     '10000_3282000_image_crop.shp", rgb="/Users/benweinstei'\
                     'n/Downloads/temp_training/2019_OSBS_5_410000_3282000_i'\
                     'mage_crop.tif")\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 7L,
        'sel-line-start': 142L,
        'selection_end': 1008L,
        'selection_start': 142L,
        'zoom': 0L},
                       loc('../DeepForest_Model/train.py'): {'attrib-starts': [],
        'code-line': '\n',
        'first-line': 4L,
        'folded-linenos': [],
        'sel-line': 24L,
        'sel-line-start': 851L,
        'selection_end': 851L,
        'selection_start': 851L,
        'zoom': 0L},
                       loc('../DeepTreeAttention/tests/test_trees.py'): {'at'\
        'trib-starts': [],
        'code-line': "is_travis = 'TRAVIS' in os.environ\n",
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 5L,
        'sel-line-start': 124L,
        'selection_end': 349L,
        'selection_start': 124L,
        'zoom': 0L},
                       loc('../NeonTreeEvaluation/evaluation/RGB/benchmark_annotations.csv'): {'a'\
        'ttrib-starts': [],
        'code-line': 'SJER_045.tif,214,308,251,354,Tree\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 12L,
        'sel-line-start': 530L,
        'selection_end': 563L,
        'selection_start': 563L,
        'zoom': 0L},
                       loc('../NeonTreeEvaluation_python/src/get_data.py'): {'a'\
        'ttrib-starts': [('load_ground_truth|0|',
                          47)],
        'code-line': '    geo_ground_truth = utilities.project_boxes(ground_'\
                     'truth)\n',
        'first-line': 39L,
        'folded-linenos': [],
        'sel-line': 53L,
        'sel-line-start': 1938L,
        'selection_end': 1998L,
        'selection_start': 1961L,
        'zoom': 0L},
                       loc('../NeonTreeEvaluation_python/tests/test_eval.py'): {'a'\
        'ttrib-starts': [],
        'code-line': 'from src import eval\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../NeonTreeEvaluation_python/tests/test_utilities.py'): {'a'\
        'ttrib-starts': [],
        'code-line': 'from src import utilities\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../deepforest-feedstock/conda-forge.yml'): {'att'\
        'rib-starts': [],
        'code-line': 'conda_forge_output_validation: true\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../deepforest-feedstock/recipe/meta.yaml'): {'at'\
        'trib-starts': [],
        'code-line': '    - tensorflow ==1.14.0\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 48L,
        'sel-line-start': 962L,
        'selection_end': 987L,
        'selection_start': 987L,
        'zoom': 0L},
                       loc('../vision/references/classification/train.py'): {'a'\
        'ttrib-starts': [],
        'code-line': 'import torch\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 4L,
        'sel-line-start': 39L,
        'selection_end': 49L,
        'selection_start': 49L,
        'zoom': 0L},
                       loc('../vision/references/classification/train_quantization.py'): {'a'\
        'ttrib-starts': [],
        'code-line': 'import copy\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 3L,
        'sel-line-start': 38L,
        'selection_end': 38L,
        'selection_start': 38L,
        'zoom': 0L},
                       loc('../vision/references/classification/utils.py'): {'a'\
        'ttrib-starts': [],
        'code-line': '\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 8L,
        'sel-line-start': 141L,
        'selection_end': 141L,
        'selection_start': 141L,
        'zoom': 0L},
                       loc('../vision/references/detection/coco_eval.py'): {'a'\
        'ttrib-starts': [],
        'code-line': 'import json\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/references/detection/coco_utils.py'): {'a'\
        'ttrib-starts': [],
        'code-line': 'import copy\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/references/detection/engine.py'): {'at'\
        'trib-starts': [('_get_iou_types|0|',
                         57)],
        'code-line': '    if isinstance(model, torch.nn.parallel.Distributed'\
                     'DataParallel):\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 59L,
        'sel-line-start': 1810L,
        'selection_end': 1844L,
        'selection_start': 1841L,
        'zoom': 0L},
                       loc('../vision/references/detection/group_by_aspect_ratio.py'): {'a'\
        'ttrib-starts': [],
        'code-line': 'import bisect\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/references/detection/train.py'): {'att'\
        'rib-starts': [],
        'code-line': 'import torchvision\n',
        'first-line': 2L,
        'folded-linenos': [],
        'sel-line': 25L,
        'sel-line-start': 952L,
        'selection_end': 952L,
        'selection_start': 952L,
        'zoom': 0L},
                       loc('../vision/references/detection/transforms.py'): {'a'\
        'ttrib-starts': [],
        'code-line': '\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 1L,
        'sel-line-start': 14L,
        'selection_end': 14L,
        'selection_start': 14L,
        'zoom': 0L},
                       loc('../vision/references/detection/utils.py'): {'att'\
        'rib-starts': [],
        'code-line': 'import errno\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 8L,
        'sel-line-start': 133L,
        'selection_end': 145L,
        'selection_start': 145L,
        'zoom': 0L},
                       loc('../vision/references/segmentation/coco_utils.py'): {'a'\
        'ttrib-starts': [],
        'code-line': 'from pycocotools import mask as coco_mask\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 8L,
        'sel-line-start': 102L,
        'selection_end': 115L,
        'selection_start': 115L,
        'zoom': 0L},
                       loc('../vision/references/segmentation/train.py'): {'a'\
        'ttrib-starts': [],
        'code-line': 'import torch.utils.data\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 5L,
        'sel-line-start': 52L,
        'selection_end': 61L,
        'selection_start': 61L,
        'zoom': 0L},
                       loc('../vision/references/segmentation/transforms.py'): {'a'\
        'ttrib-starts': [],
        'code-line': 'import random\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 2L,
        'sel-line-start': 41L,
        'selection_end': 46L,
        'selection_start': 46L,
        'zoom': 0L},
                       loc('../vision/references/segmentation/utils.py'): {'a'\
        'ttrib-starts': [],
        'code-line': 'from collections import defaultdict, deque\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/references/similarity/loss.py'): {'att'\
        'rib-starts': [],
        'code-line': "'''\n",
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 3L,
        'sel-line-start': 128L,
        'selection_end': 131L,
        'selection_start': 131L,
        'zoom': 0L},
                       loc('../vision/references/similarity/model.py'): {'at'\
        'trib-starts': [],
        'code-line': 'import torch.nn as nn\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/references/similarity/sampler.py'): {'a'\
        'ttrib-starts': [],
        'code-line': '\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 4L,
        'sel-line-start': 108L,
        'selection_end': 108L,
        'selection_start': 108L,
        'zoom': 0L},
                       loc('../vision/references/similarity/test.py'): {'att'\
        'rib-starts': [],
        'code-line': '\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 6L,
        'sel-line-start': 179L,
        'selection_end': 179L,
        'selection_start': 179L,
        'zoom': 0L},
                       loc('../vision/references/similarity/train.py'): {'at'\
        'trib-starts': [],
        'code-line': '\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 8L,
        'sel-line-start': 184L,
        'selection_end': 184L,
        'selection_start': 184L,
        'zoom': 0L},
                       loc('../vision/references/video_classification/scheduler.py'): {'a'\
        'ttrib-starts': [('WarmupMultiStepLR|0|',
                          4)],
        'code-line': 'class WarmupMultiStepLR(torch.optim.lr_scheduler._LRSc'\
                     'heduler):\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 4L,
        'sel-line-start': 47L,
        'selection_end': 88L,
        'selection_start': 88L,
        'zoom': 0L},
                       loc('../vision/references/video_classification/train.py'): {'a'\
        'ttrib-starts': [],
        'code-line': 'from torch.utils.data.dataloader import default_collat'\
                     'e\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 5L,
        'sel-line-start': 75L,
        'selection_end': 91L,
        'selection_start': 91L,
        'zoom': 0L},
                       loc('../vision/references/video_classification/transforms.py'): {'a'\
        'ttrib-starts': [],
        'code-line': 'import torch\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/references/video_classification/utils.py'): {'a'\
        'ttrib-starts': [],
        'code-line': 'from collections import defaultdict, deque\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/torchvision/datasets/caltech.py'): {'a'\
        'ttrib-starts': [],
        'code-line': 'from PIL import Image\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/torchvision/datasets/celeba.py'): {'at'\
        'trib-starts': [],
        'code-line': 'from functools import partial\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/torchvision/datasets/cifar.py'): {'att'\
        'rib-starts': [],
        'code-line': 'from PIL import Image\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/torchvision/datasets/cityscapes.py'): {'a'\
        'ttrib-starts': [],
        'code-line': 'from typing import Any, Callable, Dict, List, Optional'\
                     ', Union, Tuple\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 3L,
        'sel-line-start': 57L,
        'selection_end': 57L,
        'selection_start': 57L,
        'zoom': 0L},
                       loc('../vision/torchvision/datasets/coco.py'): {'attr'\
        'ib-starts': [],
        'code-line': 'from .vision import VisionDataset\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/torchvision/datasets/fakedata.py'): {'a'\
        'ttrib-starts': [],
        'code-line': 'import torch\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/torchvision/datasets/flickr.py'): {'at'\
        'trib-starts': [],
        'code-line': 'from collections import defaultdict\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/torchvision/datasets/folder.py'): {'at'\
        'trib-starts': [],
        'code-line': 'from .vision import VisionDataset\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/torchvision/datasets/hmdb51.py'): {'at'\
        'trib-starts': [],
        'code-line': 'import glob\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/torchvision/datasets/imagenet.py'): {'a'\
        'ttrib-starts': [],
        'code-line': 'import tempfile\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 4L,
        'sel-line-start': 78L,
        'selection_end': 93L,
        'selection_start': 93L,
        'zoom': 0L},
                       loc('../vision/torchvision/datasets/kinetics.py'): {'a'\
        'ttrib-starts': [],
        'code-line': 'from .utils import list_dir\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/torchvision/datasets/lsun.py'): {'attr'\
        'ib-starts': [],
        'code-line': 'import string\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 5L,
        'sel-line-start': 91L,
        'selection_end': 104L,
        'selection_start': 104L,
        'zoom': 0L},
                       loc('../vision/torchvision/datasets/mnist.py'): {'att'\
        'rib-starts': [],
        'code-line': 'import os\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 3L,
        'sel-line-start': 72L,
        'selection_end': 81L,
        'selection_start': 81L,
        'zoom': 0L},
                       loc('../vision/torchvision/datasets/omniglot.py'): {'a'\
        'ttrib-starts': [('Omniglot|0|',
                          7)],
        'code-line': '            creates from the "evaluation" set. This te'\
                     'rminology is defined by the authors.\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 13L,
        'sel-line-start': 537L,
        'selection_end': 601L,
        'selection_start': 601L,
        'zoom': 0L},
                       loc('../vision/torchvision/datasets/phototour.py'): {'a'\
        'ttrib-starts': [],
        'code-line': 'import torch\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 5L,
        'sel-line-start': 115L,
        'selection_end': 127L,
        'selection_start': 127L,
        'zoom': 0L},
                       loc('../vision/torchvision/datasets/places365.py'): {'a'\
        'ttrib-starts': [],
        'code-line': 'import os\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/torchvision/datasets/sbd.py'): {'attri'\
        'b-starts': [],
        'code-line': 'import os\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/torchvision/datasets/sbu.py'): {'attri'\
        'b-starts': [],
        'code-line': 'from PIL import Image\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/torchvision/datasets/semeion.py'): {'a'\
        'ttrib-starts': [],
        'code-line': 'from PIL import Image\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/torchvision/datasets/stl10.py'): {'att'\
        'rib-starts': [],
        'code-line': 'from PIL import Image\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/torchvision/datasets/svhn.py'): {'attr'\
        'ib-starts': [],
        'code-line': '\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 7L,
        'sel-line-start': 215L,
        'selection_end': 215L,
        'selection_start': 215L,
        'zoom': 0L},
                       loc('../vision/torchvision/datasets/ucf101.py'): {'at'\
        'trib-starts': [],
        'code-line': 'import os\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/torchvision/datasets/usps.py'): {'attr'\
        'ib-starts': [],
        'code-line': '\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 8L,
        'sel-line-start': 175L,
        'selection_end': 175L,
        'selection_start': 175L,
        'zoom': 0L},
                       loc('../vision/torchvision/datasets/utils.py'): {'att'\
        'rib-starts': [],
        'code-line': 'import tarfile\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 4L,
        'sel-line-start': 52L,
        'selection_end': 52L,
        'selection_start': 52L,
        'zoom': 0L},
                       loc('../vision/torchvision/datasets/video_utils.py'): {'a'\
        'ttrib-starts': [],
        'code-line': '    _read_video_from_file,\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 9L,
        'sel-line-start': 168L,
        'selection_end': 194L,
        'selection_start': 194L,
        'zoom': 0L},
                       loc('../vision/torchvision/datasets/vision.py'): {'at'\
        'trib-starts': [],
        'code-line': '\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 5L,
        'sel-line-start': 112L,
        'selection_end': 112L,
        'selection_start': 112L,
        'zoom': 0L},
                       loc('../vision/torchvision/datasets/voc.py'): {'attri'\
        'b-starts': [],
        'code-line': 'from .utils import download_url, verify_str_arg\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 7L,
        'sel-line-start': 197L,
        'selection_end': 228L,
        'selection_start': 228L,
        'zoom': 0L},
                       loc('../vision/torchvision/io/image.py'): {'attrib-st'\
        'arts': [],
        'code-line': '\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 5L,
        'sel-line-start': 73L,
        'selection_end': 73L,
        'selection_start': 73L,
        'zoom': 0L},
                       loc('../vision/torchvision/io/video.py'): {'attrib-st'\
        'arts': [],
        'code-line': '        av = ImportError(\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 18L,
        'sel-line-start': 329L,
        'selection_end': 354L,
        'selection_start': 354L,
        'zoom': 0L},
                       loc('../vision/torchvision/models/alexnet.py'): {'att'\
        'rib-starts': [],
        'code-line': 'model_urls = {\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 9L,
        'sel-line-start': 139L,
        'selection_end': 153L,
        'selection_start': 153L,
        'zoom': 0L},
                       loc('../vision/torchvision/models/densenet.py'): {'at'\
        'trib-starts': [],
        'code-line': 'import re\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/torchvision/models/detection/anchor_utils.py'): {'a'\
        'ttrib-starts': [],
        'code-line': '# Copyright (c) Facebook, Inc. and its affiliates. All'\
                     ' Rights Reserved.\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/torchvision/models/detection/backbone_utils.py'): {'a'\
        'ttrib-starts': [],
        'code-line': 'import warnings\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/torchvision/models/detection/faster_rcnn.py'): {'a'\
        'ttrib-starts': [],
        'code-line': 'import torch.nn.functional as F\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 4L,
        'sel-line-start': 71L,
        'selection_end': 102L,
        'selection_start': 102L,
        'zoom': 0L},
                       loc('../vision/torchvision/models/detection/generalized_rcnn.py'): {'a'\
        'ttrib-starts': [('GeneralizedRCNN|0|',
                          12),
                         ('GeneralizedRCNN|0|.eager_outputs|0|',
                          35)],
        'code-line': '        # type: (Dict[str, Tensor], List[Dict[str, Ten'\
                     'sor]]) -> Union[Dict[str, Tensor], List[Dict[str, Tens'\
                     'or]]]\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 36L,
        'sel-line-start': 1056L,
        'selection_end': 1113L,
        'selection_start': 1107L,
        'zoom': 0L},
                       loc('../vision/torchvision/models/detection/image_list.py'): {'a'\
        'ttrib-starts': [],
        'code-line': '# Copyright (c) Facebook, Inc. and its affiliates. All'\
                     ' Rights Reserved.\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/torchvision/models/detection/keypoint_rcnn.py'): {'a'\
        'ttrib-starts': [],
        'code-line': 'from torchvision.ops import MultiScaleRoIAlign\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 3L,
        'sel-line-start': 35L,
        'selection_end': 81L,
        'selection_start': 81L,
        'zoom': 0L},
                       loc('../vision/torchvision/models/detection/mask_rcnn.py'): {'a'\
        'ttrib-starts': [],
        'code-line': '__all__ = [\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 12L,
        'sel-line-start': 307L,
        'selection_end': 318L,
        'selection_start': 318L,
        'zoom': 0L},
                       loc('../vision/torchvision/models/detection/retinanet.py'): {'a'\
        'ttrib-starts': [],
        'code-line': 'from typing import Dict, List, Tuple, Optional\n',
        'first-line': 3L,
        'folded-linenos': [],
        'sel-line': 6L,
        'sel-line-start': 107L,
        'selection_end': 153L,
        'selection_start': 145L,
        'zoom': 0L},
                       loc('../vision/torchvision/models/detection/roi_heads.py'): {'a'\
        'ttrib-starts': [('RoIHeads|0|',
                          484),
                         ('RoIHeads|0|.check_targets|0|',
                          619)],
        'code-line': '        # type: (Optional[List[Dict[str, Tensor]]]) ->'\
                     ' None\n',
        'first-line': 607L,
        'folded-linenos': [],
        'sel-line': 620L,
        'sel-line-start': 22884L,
        'selection_end': 22909L,
        'selection_start': 22901L,
        'zoom': 0L},
                       loc('../vision/torchvision/models/detection/rpn.py'): {'a'\
        'ttrib-starts': [('RegionProposalNetwork|0|',
                          103),
                         ('RegionProposalNetwork|0|.pre_nms_top_n|0|',
                          167)],
        'code-line': '    def pre_nms_top_n(self):\n',
        'first-line': 157L,
        'folded-linenos': [],
        'sel-line': 167L,
        'sel-line-start': 6362L,
        'selection_end': 6379L,
        'selection_start': 6379L,
        'zoom': 0L},
                       loc('../vision/torchvision/models/detection/transform.py'): {'a'\
        'ttrib-starts': [],
        'code-line': '\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 6L,
        'sel-line-start': 157L,
        'selection_end': 157L,
        'selection_start': 157L,
        'zoom': 0L},
                       loc('../vision/torchvision/models/googlenet.py'): {'a'\
        'ttrib-starts': [],
        'code-line': 'import warnings\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/torchvision/models/inception.py'): {'a'\
        'ttrib-starts': [],
        'code-line': 'from collections import namedtuple\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/torchvision/models/mnasnet.py'): {'att'\
        'rib-starts': [],
        'code-line': 'import warnings\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/torchvision/models/mobilenet.py'): {'a'\
        'ttrib-starts': [],
        'code-line': '',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 3L,
        'sel-line-start': 90L,
        'selection_end': 90L,
        'selection_start': 90L,
        'zoom': 0L},
                       loc('../vision/torchvision/models/mobilenetv2.py'): {'a'\
        'ttrib-starts': [],
        'code-line': 'from torch import nn\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/torchvision/models/resnet.py'): {'attr'\
        'ib-starts': [],
        'code-line': 'import torch\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/torchvision/models/segmentation/deeplabv3.py'): {'a'\
        'ttrib-starts': [],
        'code-line': 'import torch\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/torchvision/models/segmentation/fcn.py'): {'a'\
        'ttrib-starts': [],
        'code-line': 'from torch import nn\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/torchvision/models/segmentation/segmentation.py'): {'a'\
        'ttrib-starts': [],
        'code-line': '\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 8L,
        'sel-line-start': 279L,
        'selection_end': 279L,
        'selection_start': 279L,
        'zoom': 0L},
                       loc('../vision/torchvision/models/shufflenetv2.py'): {'a'\
        'ttrib-starts': [],
        'code-line': 'import torch\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/torchvision/models/squeezenet.py'): {'a'\
        'ttrib-starts': [],
        'code-line': 'import torch\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/torchvision/models/utils.py'): {'attri'\
        'b-starts': [],
        'code-line': 'try:\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/torchvision/models/vgg.py'): {'attrib-'\
        'starts': [],
        'code-line': 'import torch\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/torchvision/models/video/resnet.py'): {'a'\
        'ttrib-starts': [],
        'code-line': 'from ..utils import load_state_dict_from_url\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 2L,
        'sel-line-start': 23L,
        'selection_end': 69L,
        'selection_start': 31L,
        'zoom': 0L},
                       loc('../vision/torchvision/ops/_box_convert.py'): {'a'\
        'ttrib-starts': [],
        'code-line': 'import torch\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/torchvision/ops/_register_onnx_ops.py'): {'a'\
        'ttrib-starts': [],
        'code-line': 'import sys\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/torchvision/ops/_utils.py'): {'attrib-'\
        'starts': [],
        'code-line': 'import torch\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/torchvision/ops/boxes.py'): {'attrib-s'\
        'tarts': [],
        'code-line': 'import torch\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/torchvision/ops/deform_conv.py'): {'at'\
        'trib-starts': [],
        'code-line': 'import math\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/torchvision/ops/feature_pyramid_network.py'): {'a'\
        'ttrib-starts': [],
        'code-line': 'from collections import OrderedDict\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/torchvision/ops/focal_loss.py'): {'att'\
        'rib-starts': [],
        'code-line': 'import torch\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/torchvision/ops/misc.py'): {'attrib-st'\
        'arts': [],
        'code-line': '\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 14L,
        'sel-line-start': 328L,
        'selection_end': 328L,
        'selection_start': 328L,
        'zoom': 0L},
                       loc('../vision/torchvision/ops/poolers.py'): {'attrib'\
        '-starts': [],
        'code-line': '# Copyright (c) Facebook, Inc. and its affiliates. All'\
                     ' Rights Reserved.\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/torchvision/ops/ps_roi_align.py'): {'a'\
        'ttrib-starts': [],
        'code-line': 'import torch\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/torchvision/ops/ps_roi_pool.py'): {'at'\
        'trib-starts': [],
        'code-line': 'import torch\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/torchvision/ops/roi_align.py'): {'attr'\
        'ib-starts': [('roi_align|0|',
                       10)],
        'code-line': 'def roi_align(\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 10L,
        'sel-line-start': 260L,
        'selection_end': 274L,
        'selection_start': 274L,
        'zoom': 0L},
                       loc('../vision/torchvision/ops/roi_pool.py'): {'attri'\
        'b-starts': [],
        'code-line': 'import torch\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/torchvision/transforms/autoaugment.py'): {'a'\
        'ttrib-starts': [],
        'code-line': 'import math\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/torchvision/transforms/functional.py'): {'a'\
        'ttrib-starts': [],
        'code-line': 'import math\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/torchvision/transforms/functional_pil.py'): {'a'\
        'ttrib-starts': [],
        'code-line': 'import numbers\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/torchvision/transforms/functional_tensor.py'): {'a'\
        'ttrib-starts': [],
        'code-line': 'import warnings\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../vision/torchvision/transforms/transforms.py'): {'a'\
        'ttrib-starts': [],
        'code-line': 'from .functional import InterpolationMode, _interpolat'\
                     'ion_modes_from_int\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 16L,
        'sel-line-start': 271L,
        'selection_end': 312L,
        'selection_start': 295L,
        'zoom': 0L},
                       loc('../../Downloads/tv-training-code.py'): {'attrib-'\
        'starts': [],
        'code-line': 'from engine import train_one_epoch, evaluate\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 12L,
        'sel-line-start': 372L,
        'selection_end': 383L,
        'selection_start': 377L,
        'zoom': 0L},
                       loc('../../opt/miniconda3/envs/DeepForest/lib/python3.7/site-packages/_pytest/config/__init__.py'): {'a'\
        'ttrib-starts': [],
        'code-line': '',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../../opt/miniconda3/envs/DeepForest/lib/python3.7/site-packages/_pytest/python.py'): {'a'\
        'ttrib-starts': [],
        'code-line': '',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../../opt/miniconda3/envs/DeepForest_pytorch/lib/python3.7/site-packages/_pytest/python.py'): {'a'\
        'ttrib-starts': [],
        'code-line': '',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../../opt/miniconda3/envs/DeepForest_pytorch/lib/python3.8/site-packages/_pytest/outcomes.py'): {'a'\
        'ttrib-starts': [('fail|0|',
                          142)],
        'code-line': '    raise Failed(msg=msg, pytrace=pytrace)\n',
        'first-line': 142L,
        'folded-linenos': [],
        'sel-line': 152L,
        'sel-line-start': 4855L,
        'selection_end': 4855L,
        'selection_start': 4855L,
        'zoom': 0L},
                       loc('../../opt/miniconda3/envs/DeepForest_pytorch/lib/python3.8/site-packages/_pytest/python.py'): {'a'\
        'ttrib-starts': [('pytest_pyfunc_call|0|',
                          176)],
        'code-line': '    result = testfunction(**testargs)\n',
        'first-line': 177L,
        'folded-linenos': [],
        'sel-line': 182L,
        'sel-line-start': 6346L,
        'selection_end': 6346L,
        'selection_start': 6346L,
        'zoom': 0L},
                       loc('../../opt/miniconda3/envs/DeepForest_pytorch/lib/python3.8/site-packages/geopandas/plotting.py'): {'a'\
        'ttrib-starts': [('_plot_polygon_collection|0|',
                          88)],
        'code-line': '        raise ImportError(\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 121L,
        'sel-line-start': 3936L,
        'selection_end': 3936L,
        'selection_start': 3936L,
        'zoom': 0L},
                       loc('../../opt/miniconda3/envs/DeepForest_pytorch/lib/python3.8/site-packages/numpy/core/numeric.py'): {'a'\
        'ttrib-starts': [('rollaxis|0|',
                          1218)],
        'code-line': '    return a.transpose(axes)\n',
        'first-line': 1285L,
        'folded-linenos': [],
        'sel-line': 1304L,
        'sel-line-start': 39880L,
        'selection_end': 39880L,
        'selection_start': 39880L,
        'zoom': 0L},
                       loc('../../opt/miniconda3/envs/DeepForest_pytorch/lib/python3.8/site-packages/pandas/core/frame.py'): {'a'\
        'ttrib-starts': [('DataFrame|0|',
                          393),
                         ('DataFrame|0|.groupby|0|',
                          6683)],
        'code-line': '        return DataFrameGroupBy(\n',
        'first-line': 6684L,
        'folded-linenos': [],
        'sel-line': 6713L,
        'sel-line-start': 232104L,
        'selection_end': 232104L,
        'selection_start': 232104L,
        'zoom': 0L},
                       loc('../../opt/miniconda3/envs/DeepForest_pytorch/lib/python3.8/site-packages/pandas/core/generic.py'): {'a'\
        'ttrib-starts': [('NDFrame|0|',
                          144),
                         ('NDFrame|0|.__getattr__|0|',
                          5443)],
        'code-line': '            return object.__getattribute__(self, name)'\
                     '\n',
        'first-line': 5447L,
        'folded-linenos': [],
        'sel-line': 5459L,
        'sel-line-start': 184320L,
        'selection_end': 184320L,
        'selection_start': 184320L,
        'zoom': 0L},
                       loc('../../opt/miniconda3/envs/DeepForest_pytorch/lib/python3.8/site-packages/pandas/core/groupby/groupby.py'): {'a'\
        'ttrib-starts': [('BaseGroupBy|0|',
                          498),
                         ('BaseGroupBy|0|.__init__|0|',
                          517)],
        'code-line': '            grouper, exclusions, obj = get_grouper(\n',
        'first-line': 530L,
        'folded-linenos': [],
        'sel-line': 559L,
        'sel-line-start': 16963L,
        'selection_end': 16963L,
        'selection_start': 16963L,
        'zoom': 0L},
                       loc('../../opt/miniconda3/envs/DeepForest_pytorch/lib/python3.8/site-packages/pandas/core/groupby/grouper.py'): {'a'\
        'ttrib-starts': [('get_grouper|0|',
                          639)],
        'code-line': '                raise KeyError(gpr)\n',
        'first-line': 805L,
        'folded-linenos': [],
        'sel-line': 815L,
        'sel-line-start': 28664L,
        'selection_end': 28664L,
        'selection_start': 28664L,
        'zoom': 0L},
                       loc('../../opt/miniconda3/envs/DeepForest_pytorch/lib/python3.8/site-packages/pandas/core/indexes/range.py'): {'a'\
        'ttrib-starts': [('RangeIndex|0|',
                          37),
                         ('RangeIndex|0|.get_loc|0|',
                          345)],
        'code-line': '                    raise KeyError(key) from err\n',
        'first-line': 337L,
        'folded-linenos': [],
        'sel-line': 352L,
        'sel-line-start': 9857L,
        'selection_end': 9857L,
        'selection_start': 9857L,
        'zoom': 0L},
                       loc('../../opt/miniconda3/envs/DeepForest_pytorch/lib/python3.8/site-packages/pandas/core/indexing.py'): {'a'\
        'ttrib-starts': [('_iLocIndexer|0|',
                          1328),
                         ('_iLocIndexer|0|._validate_integer|0|',
                          1424)],
        'code-line': '            raise IndexError("single positional indexe'\
                     'r is out-of-bounds")\n',
        'first-line': 1422L,
        'folded-linenos': [],
        'sel-line': 1442L,
        'sel-line-start': 46881L,
        'selection_end': 46881L,
        'selection_start': 46881L,
        'zoom': 0L},
                       loc('../../opt/miniconda3/envs/DeepForest_pytorch/lib/python3.8/site-packages/pandas/core/reshape/concat.py'): {'a'\
        'ttrib-starts': [('_Concatenator|0|',
                          300),
                         ('_Concatenator|0|.__init__|0|',
                          305)],
        'code-line': '        if isinstance(objs, (ABCSeries, ABCDataFrame, '\
                     'str)):\n',
        'first-line': 294L,
        'folded-linenos': [],
        'sel-line': 318L,
        'sel-line-start': 9054L,
        'selection_end': 9114L,
        'selection_start': 9114L,
        'zoom': 0L},
                       loc('../../opt/miniconda3/envs/DeepForest_pytorch/lib/python3.8/site-packages/pandas/io/common.py'): {'a'\
        'ttrib-starts': [('_is_binary_mode|0|',
                          823)],
        'code-line': '    return isinstance(handle, tuple(binary_classes)) o'\
                     'r "b" in getattr(\n',
        'first-line': 811L,
        'folded-linenos': [],
        'sel-line': 828L,
        'sel-line-start': 26969L,
        'selection_end': 26969L,
        'selection_start': 26969L,
        'zoom': 0L},
                       loc('../../opt/miniconda3/envs/DeepForest_pytorch/lib/python3.8/site-packages/pluggy/callers.py'): {'a'\
        'ttrib-starts': [('_multicall|0|',
                          156)],
        'code-line': '        return outcome.get_result()\n',
        'first-line': 186L,
        'folded-linenos': [],
        'sel-line': 207L,
        'sel-line-start': 6784L,
        'selection_end': 6784L,
        'selection_start': 6784L,
        'zoom': 0L},
                       loc('../../opt/miniconda3/envs/DeepForest_pytorch/lib/python3.8/site-packages/pytorch_lightning/trainer/connectors/checkpoint_connector.py'): {'a'\
        'ttrib-starts': [('CheckpointConnector|0|',
                          37),
                         ('CheckpointConnector|0|.dump_checkpoint|0|',
                          223)],
        'code-line': "        checkpoint['state_dict'] = model.state_dict()"\
                     "\n",
        'first-line': 270L,
        'folded-linenos': [],
        'sel-line': 293L,
        'sel-line-start': 12461L,
        'selection_end': 12461L,
        'selection_start': 12461L,
        'zoom': 0L},
                       loc('../../opt/miniconda3/envs/DeepForest_pytorch/lib/python3.8/site-packages/pytorch_lightning/trainer/evaluation_loop.py'): {'a'\
        'ttrib-starts': [('EvaluationLoop|0|',
                          23),
                         ('EvaluationLoop|0|.__run_eval_epoch_end|0|',
                          221)],
        'code-line': '                eval_results = model.test_epoch_end(ev'\
                     'al_results)\n',
        'first-line': 228L,
        'folded-linenos': [],
        'sel-line': 237L,
        'sel-line-start': 8957L,
        'selection_end': 9021L,
        'selection_start': 9009L,
        'zoom': 0L},
                       loc('../../opt/miniconda3/envs/DeepForest_pytorch/lib/python3.8/site-packages/pytorch_lightning/trainer/trainer.py'): {'a'\
        'ttrib-starts': [('Trainer|0|',
                          71),
                         ('Trainer|0|.fit|0|',
                          411)],
        'code-line': '        results = self.accelerator_backend.train()\n',
        'first-line': 464L,
        'folded-linenos': [],
        'sel-line': 469L,
        'sel-line-start': 21177L,
        'selection_end': 21177L,
        'selection_start': 21177L,
        'zoom': 0L},
                       loc('../../opt/miniconda3/envs/DeepForest_pytorch/lib/python3.8/site-packages/pytorch_lightning/trainer/training_loop.py'): {'a'\
        'ttrib-starts': [('TrainLoop|0|',
                          37),
                         ('TrainLoop|0|.run_training_batch|0|',
                          641),
                         ('TrainLoop|0|.run_training_batch|0|.train_step_and'\
                          '_backward_closure|0|',
                          706)],
        'code-line': '                            result = self.training_ste'\
                     'p_and_backward(\n',
        'first-line': 692L,
        'folded-linenos': [],
        'sel-line': 707L,
        'sel-line-start': 29056L,
        'selection_end': 29056L,
        'selection_start': 29056L,
        'zoom': 0L},
                       loc('../../opt/miniconda3/envs/DeepForest_pytorch/lib/python3.8/site-packages/rtree/index.py'): {'a'\
        'ttrib-starts': [('Index|0|',
                          79),
                         ('Index|0|.get_coordinate_pointers|0|',
                          329)],
        'code-line': '            raise core.RTreeError(\n',
        'first-line': 336L,
        'folded-linenos': [],
        'sel-line': 348L,
        'sel-line-start': 12073L,
        'selection_end': 12073L,
        'selection_start': 12073L,
        'zoom': 0L},
                       loc('../../opt/miniconda3/envs/DeepForest_pytorch/lib/python3.8/site-packages/tifffile/tifffile.py'): {'a'\
        'ttrib-starts': [('TiffPage|0|',
                          5228),
                         ('TiffPage|0|.decode|0|',
                          5577),
                         ('TiffPage|0|.decode|0|.decode|1|',
                          5925)],
        'code-line': "                raise ValueError(f'TiffPage {self.inde"\
                     "x}: {exc}')\r\n",
        'first-line': 5612L,
        'folded-linenos': [],
        'sel-line': 5633L,
        'sel-line-start': 217235L,
        'selection_end': 217235L,
        'selection_start': 217235L,
        'zoom': 0L},
                       loc('../../opt/miniconda3/envs/DeepForest_pytorch/lib/python3.8/site-packages/torch/nn/modules/conv.py'): {'a'\
        'ttrib-starts': [('Conv2d|0|',
                          261),
                         ('Conv2d|0|._conv_forward|0|',
                          413)],
        'code-line': '        return F.conv2d(input, weight, self.bias, self'\
                     '.stride,\n',
        'first-line': 395L,
        'folded-linenos': [],
        'sel-line': 418L,
        'sel-line-start': 18107L,
        'selection_end': 18107L,
        'selection_start': 18107L,
        'zoom': 0L},
                       loc('../../opt/miniconda3/envs/DeepForest_pytorch/lib/python3.8/site-packages/torch/optim/sgd.py'): {'a'\
        'ttrib-starts': [('SGD|0|',
                          4),
                         ('SGD|0|.step|0|',
                          75)],
        'code-line': '                loss = closure()\n',
        'first-line': 68L,
        'folded-linenos': [],
        'sel-line': 85L,
        'sel-line-start': 3243L,
        'selection_end': 3243L,
        'selection_start': 3243L,
        'zoom': 0L},
                       loc('../../opt/miniconda3/envs/DeepForest_pytorch/lib/python3.8/site-packages/torch/utils/data/_utils/collate.py'): {'a'\
        'ttrib-starts': [('default_collate|0|',
                          41)],
        'code-line': '        return {key: default_collate([d[key] for d in '\
                     'batch]) for key in elem}\n',
        'first-line': 52L,
        'folded-linenos': [],
        'sel-line': 72L,
        'sel-line-start': 2926L,
        'selection_end': 2926L,
        'selection_start': 2926L,
        'zoom': 0L},
                       loc('../../opt/miniconda3/envs/DeepForest_pytorch/lib/python3.8/site-packages/torch/utils/data/_utils/fetch.py'): {'a'\
        'ttrib-starts': [('_BaseDatasetFetcher|0|',
                          6),
                         ('_BaseDatasetFetcher|0|.fetch|0|',
                          13)],
        'code-line': '        raise NotImplementedError()\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 14L,
        'sel-line-start': 511L,
        'selection_end': 546L,
        'selection_start': 546L,
        'zoom': 0L},
                       loc('../../opt/miniconda3/envs/DeepForest_pytorch/lib/python3.8/site-packages/torchsummary/torchsummary.py'): {'a'\
        'ttrib-starts': [('summary|0|',
                          8),
                         ('summary|0|.register_hook|0|',
                          10),
                         ('summary|0|.register_hook|0|.hook|0|',
                          12)],
        'code-line': '            summary[m_key]["input_shape"] = list(input'\
                     '[0].size())\n',
        'first-line': 9L,
        'folded-linenos': [],
        'sel-line': 18L,
        'sel-line-start': 482L,
        'selection_end': 482L,
        'selection_start': 482L,
        'zoom': 0L},
                       loc('../../opt/miniconda3/envs/DeepForest_pytorch/lib/python3.8/site-packages/torchvision/models/detection/retinanet.py'): {'a'\
        'ttrib-starts': [('RetinaNet|0|',
                          243),
                         ('RetinaNet|0|.forward|0|',
                          483)],
        'code-line': '        for img in images:\n',
        'first-line': 501L,
        'folded-linenos': [],
        'sel-line': 515L,
        'sel-line-start': 22606L,
        'selection_end': 22606L,
        'selection_start': 22606L,
        'zoom': 0L},
                       loc('../../opt/miniconda3/envs/DeepForest_pytorch/lib/python3.8/site-packages/torchvision/transforms/transforms.py'): {'a'\
        'ttrib-starts': [('Resize|0|',
                          231),
                         ('Resize|0|.__init__|0|',
                          249)],
        'code-line': '            raise ValueError("If size is a sequence, i'\
                     't should have 1 or 2 values")\n',
        'first-line': 233L,
        'folded-linenos': [],
        'sel-line': 254L,
        'sel-line-start': 9069L,
        'selection_end': 9152L,
        'selection_start': 9069L,
        'zoom': 0L},
                       loc('../../opt/miniconda3/envs/Tree_Zooniverse/lib/python3.7/csv.py'): {'a'\
        'ttrib-starts': [('DictReader|0|',
                          80),
                         ('DictReader|0|.fieldnames|0|',
                          104)],
        'code-line': '        return self._fieldnames\n',
        'first-line': 91L,
        'folded-linenos': [],
        'sel-line': 101L,
        'sel-line-start': 3015L,
        'selection_end': 3046L,
        'selection_start': 3046L,
        'zoom': 0L}}
proj.build-cmd = {None: ('default',
                         None)}
proj.env-vars = {None: ('default',
                        [u''])}
proj.initial-dir = {None: ('custom',
                           u'/Users/benweinstein/Documents/DeepForest-pytorch')}
proj.pyexec = {None: ('custom',
                      u'/Users/benweinstein/opt/miniconda3/envs/DeepForest_pytorch/bin/python3')}
proj.pypath = {None: ('custom',
                      [])}
proj.vcs-system-config = ('prefs',
                          {'bzr': {'versioncontrol.bzr.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.bzr.executable': u'bzr'},
                           'cvs': {'versioncontrol.cvs.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.cvs.executable': u'cvs',
                                   'versioncontrol.cvs.extra-global-args': '-'\
        'z3'},
                           'git': {'versioncontrol.git.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.git.executable': u'git',
                                   'versioncontrol.git.use-porcelain': True},
                           'hg': {'versioncontrol.hg.active': 'active-if-pro'\
        'ject-dir',
                                  'versioncontrol.hg.dont-find-unregistered': True,
                                  'versioncontrol.hg.executable': u'hg',
                                  'versioncontrol.hg.extra-global-args': '--'\
        'encoding=utf8'},
                           'perforce': {'versioncontrol.perforce.active': 'n'\
        'ot-active',
        'versioncontrol.perforce.dont-find-unregistered': True,
        'versioncontrol.perforce.executable': u'p4',
        'versioncontrol.perforce.extra-global-args': ''},
                           'svn': {'versioncontrol.svn.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.svn.executable': u'svn',
                                   'versioncontrol.svn.extra-global-args': '',
                                   'versioncontrol.svn.svnadmin-executable': u'svnadmin'}})
search.replace-history = [u'format_boxes']
search.search-history = [u'dataset',
                         u'get_transform',
                         u'load_dataset',
                         u'plot_prediction_and_targets',
                         u'prediction = prediction.detach().cpu().numpy()',
                         u'device',
                         u'predict_file',
                         u'evaluate',
                         u'use_release',
                         u'save_model',
                         u'score_',
                         u'score_treshold',
                         u'score_tre',
                         u'm.evaluate',
                         u'score_threshold',
                         u'log_ass',
                         u'project',
                         u'project_boxes',
                         u'shuffle',
                         u'torch']
testing.stored-results = (1,
                          [(u'/Users/benweinstein/Documents/DeepForest-pytorch/tests/test_data.py',
                            [('test_get_data',
                              0,
                              None,
                              None,
                              None,
                              1614717355,
                              7)]),
                           (u'/Users/benweinstein/Documents/DeepForest-pytorch/tests/test_dataset.py',
                            [('test_TreeDataset',
                              0,
                              None,
                              None,
                              None,
                              1614717355,
                              7),
                             ('test_TreeDataset_transform[False]',
                              0,
                              None,
                              None,
                              None,
                              1614717355,
                              26),
                             ('test_TreeDataset_transform[True]',
                              0,
                              None,
                              None,
                              None,
                              1614717355,
                              26)]),
                           (u'/Users/benweinstein/Documents/DeepForest-pytorch/tests/test_evaluate.py',
                            [('test_evaluate_image',
                              0,
                              None,
                              None,
                              None,
                              1614966249,
                              17),
                             ('test_evaluate',
                              0,
                              None,
                              None,
                              None,
                              1614966323,
                              27)]),
                           (u'/Users/benweinstein/Documents/DeepForest-pytorch/tests/test_preprocess.py',
                            [('test_split_raster_empty',
                              2,
                              None,
                              None,
                              ('',
                               "<ExceptionInfo FileNotFoundError(\"There is "\
                               "no config at /Users/benweinstein/Documents/D"\
                               "eepForest-pytorch/deepforest/data/deepforest"\
                               "_c...] No such file or directory: '/Users/be"\
                               "nweinstein/Documents/DeepForest-pytorch/deep"\
                               "forest/data/deepforest_config.yml'\") tblen="\
                               "2>",
                               "FileNotFoundError: There is no config at /Us"\
                               "ers/benweinstein/Documents/DeepForest-pytorc"\
                               "h/deepforest/data/deepforest_config.yml, yie"\
                               "lds [Errno 2] No such file or directory: '/U"\
                               "sers/benweinstein/Documents/DeepForest-pytor"\
                               "ch/deepforest/data/deepforest_config.yml'",
                               [(u'/Users/benweinstein/Documents/DeepForest-pytorch/tests/test_preprocess.py',
                                 '/Users/benweinstein/Documents/DeepForest-p'\
                                 'ytorch/tests/test_preprocess.py',
                                 18,
                                 'config',
                                 None,
                                 '    config = utilities.read_config(get_dat'\
                                 'a("deepforest_config.yml"))'),
                                (u'/Users/benweinstein/Documents/DeepForest-pytorch/deepforest/utilities.py',
                                 '/Users/benweinstein/Documents/DeepForest-p'\
                                 'ytorch/deepforest/utilities.py',
                                 26,
                                 'read_config',
                                 None,
                                 '        raise FileNotFoundError("There is '\
                                 'no config at {}, yields {}".format(')],
                               0,
                               None,
                               None,
                               None,
                               None),
                              1614993031,
                              87),
                             ('test_select_annotations',
                              2,
                              None,
                              None,
                              ('',
                               "<ExceptionInfo FileNotFoundError(\"There is "\
                               "no config at /Users/benweinstein/Documents/D"\
                               "eepForest-pytorch/deepforest/data/deepforest"\
                               "_c...] No such file or directory: '/Users/be"\
                               "nweinstein/Documents/DeepForest-pytorch/deep"\
                               "forest/data/deepforest_config.yml'\") tblen="\
                               "2>",
                               "FileNotFoundError: There is no config at /Us"\
                               "ers/benweinstein/Documents/DeepForest-pytorc"\
                               "h/deepforest/data/deepforest_config.yml, yie"\
                               "lds [Errno 2] No such file or directory: '/U"\
                               "sers/benweinstein/Documents/DeepForest-pytor"\
                               "ch/deepforest/data/deepforest_config.yml'",
                               [(u'/Users/benweinstein/Documents/DeepForest-pytorch/tests/test_preprocess.py',
                                 '/Users/benweinstein/Documents/DeepForest-p'\
                                 'ytorch/tests/test_preprocess.py',
                                 18,
                                 'config',
                                 None,
                                 '    config = utilities.read_config(get_dat'\
                                 'a("deepforest_config.yml"))'),
                                (u'/Users/benweinstein/Documents/DeepForest-pytorch/deepforest/utilities.py',
                                 '/Users/benweinstein/Documents/DeepForest-p'\
                                 'ytorch/deepforest/utilities.py',
                                 26,
                                 'read_config',
                                 None,
                                 '        raise FileNotFoundError("There is '\
                                 'no config at {}, yields {}".format(')],
                               0,
                               None,
                               None,
                               None,
                               None),
                              1614993031,
                              45),
                             ('test_compute_windows',
                              2,
                              None,
                              None,
                              ('',
                               "<ExceptionInfo FileNotFoundError(\"There is "\
                               "no config at /Users/benweinstein/Documents/D"\
                               "eepForest-pytorch/deepforest/data/deepforest"\
                               "_c...] No such file or directory: '/Users/be"\
                               "nweinstein/Documents/DeepForest-pytorch/deep"\
                               "forest/data/deepforest_config.yml'\") tblen="\
                               "2>",
                               "FileNotFoundError: There is no config at /Us"\
                               "ers/benweinstein/Documents/DeepForest-pytorc"\
                               "h/deepforest/data/deepforest_config.yml, yie"\
                               "lds [Errno 2] No such file or directory: '/U"\
                               "sers/benweinstein/Documents/DeepForest-pytor"\
                               "ch/deepforest/data/deepforest_config.yml'",
                               [(u'/Users/benweinstein/Documents/DeepForest-pytorch/tests/test_preprocess.py',
                                 '/Users/benweinstein/Documents/DeepForest-p'\
                                 'ytorch/tests/test_preprocess.py',
                                 18,
                                 'config',
                                 None,
                                 '    config = utilities.read_config(get_dat'\
                                 'a("deepforest_config.yml"))'),
                                (u'/Users/benweinstein/Documents/DeepForest-pytorch/deepforest/utilities.py',
                                 '/Users/benweinstein/Documents/DeepForest-p'\
                                 'ytorch/deepforest/utilities.py',
                                 26,
                                 'read_config',
                                 None,
                                 '        raise FileNotFoundError("There is '\
                                 'no config at {}, yields {}".format(')],
                               0,
                               None,
                               None,
                               None,
                               None),
                              1614993031,
                              39),
                             ('test_split_size_error',
                              2,
                              None,
                              None,
                              ('',
                               "<ExceptionInfo FileNotFoundError(\"There is "\
                               "no config at /Users/benweinstein/Documents/D"\
                               "eepForest-pytorch/deepforest/data/deepforest"\
                               "_c...] No such file or directory: '/Users/be"\
                               "nweinstein/Documents/DeepForest-pytorch/deep"\
                               "forest/data/deepforest_config.yml'\") tblen="\
                               "2>",
                               "FileNotFoundError: There is no config at /Us"\
                               "ers/benweinstein/Documents/DeepForest-pytorc"\
                               "h/deepforest/data/deepforest_config.yml, yie"\
                               "lds [Errno 2] No such file or directory: '/U"\
                               "sers/benweinstein/Documents/DeepForest-pytor"\
                               "ch/deepforest/data/deepforest_config.yml'",
                               [(u'/Users/benweinstein/Documents/DeepForest-pytorch/tests/test_preprocess.py',
                                 '/Users/benweinstein/Documents/DeepForest-p'\
                                 'ytorch/tests/test_preprocess.py',
                                 18,
                                 'config',
                                 None,
                                 '    config = utilities.read_config(get_dat'\
                                 'a("deepforest_config.yml"))'),
                                (u'/Users/benweinstein/Documents/DeepForest-pytorch/deepforest/utilities.py',
                                 '/Users/benweinstein/Documents/DeepForest-p'\
                                 'ytorch/deepforest/utilities.py',
                                 26,
                                 'read_config',
                                 None,
                                 '        raise FileNotFoundError("There is '\
                                 'no config at {}, yields {}".format(')],
                               0,
                               None,
                               None,
                               None,
                               None),
                              1614993031,
                              127),
                             ('test_split_raster',
                              2,
                              None,
                              None,
                              ('',
                               "<ExceptionInfo FileNotFoundError(\"There is "\
                               "no config at /Users/benweinstein/Documents/D"\
                               "eepForest-pytorch/deepforest/data/deepforest"\
                               "_c...] No such file or directory: '/Users/be"\
                               "nweinstein/Documents/DeepForest-pytorch/deep"\
                               "forest/data/deepforest_config.yml'\") tblen="\
                               "2>",
                               "FileNotFoundError: There is no config at /Us"\
                               "ers/benweinstein/Documents/DeepForest-pytorc"\
                               "h/deepforest/data/deepforest_config.yml, yie"\
                               "lds [Errno 2] No such file or directory: '/U"\
                               "sers/benweinstein/Documents/DeepForest-pytor"\
                               "ch/deepforest/data/deepforest_config.yml'",
                               [(u'/Users/benweinstein/Documents/DeepForest-pytorch/tests/test_preprocess.py',
                                 '/Users/benweinstein/Documents/DeepForest-p'\
                                 'ytorch/tests/test_preprocess.py',
                                 18,
                                 'config',
                                 None,
                                 '    config = utilities.read_config(get_dat'\
                                 'a("deepforest_config.yml"))'),
                                (u'/Users/benweinstein/Documents/DeepForest-pytorch/deepforest/utilities.py',
                                 '/Users/benweinstein/Documents/DeepForest-p'\
                                 'ytorch/deepforest/utilities.py',
                                 26,
                                 'read_config',
                                 None,
                                 '        raise FileNotFoundError("There is '\
                                 'no config at {}, yields {}".format(')],
                               0,
                               None,
                               None,
                               None,
                               None),
                              1614993031,
                              76),
                             ('test_select_annotations_tile',
                              2,
                              None,
                              None,
                              ('',
                               "<ExceptionInfo FileNotFoundError(\"There is "\
                               "no config at /Users/benweinstein/Documents/D"\
                               "eepForest-pytorch/deepforest/data/deepforest"\
                               "_c...] No such file or directory: '/Users/be"\
                               "nweinstein/Documents/DeepForest-pytorch/deep"\
                               "forest/data/deepforest_config.yml'\") tblen="\
                               "2>",
                               "FileNotFoundError: There is no config at /Us"\
                               "ers/benweinstein/Documents/DeepForest-pytorc"\
                               "h/deepforest/data/deepforest_config.yml, yie"\
                               "lds [Errno 2] No such file or directory: '/U"\
                               "sers/benweinstein/Documents/DeepForest-pytor"\
                               "ch/deepforest/data/deepforest_config.yml'",
                               [(u'/Users/benweinstein/Documents/DeepForest-pytorch/tests/test_preprocess.py',
                                 '/Users/benweinstein/Documents/DeepForest-p'\
                                 'ytorch/tests/test_preprocess.py',
                                 18,
                                 'config',
                                 None,
                                 '    config = utilities.read_config(get_dat'\
                                 'a("deepforest_config.yml"))'),
                                (u'/Users/benweinstein/Documents/DeepForest-pytorch/deepforest/utilities.py',
                                 '/Users/benweinstein/Documents/DeepForest-p'\
                                 'ytorch/deepforest/utilities.py',
                                 26,
                                 'read_config',
                                 None,
                                 '        raise FileNotFoundError("There is '\
                                 'no config at {}, yields {}".format(')],
                               0,
                               None,
                               None,
                               None,
                               None),
                              1614993031,
                              60)]),
                           (u'/Users/benweinstein/Documents/DeepForest-pytorch/tests/test_environment.py',
                            [('test_environment',
                              0,
                              None,
                              None,
                              None,
                              1614717355,
                              3)]),
                           (u'/Users/benweinstein/Documents/DeepForest-pytorch/tests/test_model.py',
                            [('test_create_model',
                              0,
                              None,
                              None,
                              None,
                              1614717355,
                              11),
                             ('test_load_backbone',
                              0,
                              None,
                              None,
                              None,
                              1614717355,
                              5)]),
                           (u'/Users/benweinstein/Documents/DeepForest-pytorch/tests/test_main.py',
                            [('test_evaluate',
                              0,
                              None,
                              None,
                              None,
                              1614884096,
                              112),
                             ('test_train_callbacks',
                              0,
                              None,
                              None,
                              None,
                              1614983769,
                              121),
                             ('test_predict_image_empty',
                              0,
                              None,
                              None,
                              None,
                              1614884096,
                              41),
                             ('test_save_and_reload',
                              0,
                              None,
                              None,
                              None,
                              1614984768,
                              142),
                             ('test_main',
                              0,
                              None,
                              None,
                              None,
                              1614884096,
                              35),
                             ('test_predict_file',
                              0,
                              None,
                              None,
                              None,
                              1614884096,
                              68),
                             ('test_train',
                              0,
                              None,
                              None,
                              None,
                              1614884096,
                              38),
                             ('test_predict_image_fromarray',
                              0,
                              None,
                              None,
                              None,
                              1614884096,
                              54),
                             ('test_predict_tile',
                              0,
                              None,
                              None,
                              None,
                              1614884096,
                              76),
                             ('test_predict_return_plot',
                              0,
                              None,
                              None,
                              None,
                              1614884096,
                              62),
                             ('test_predict_image_fromfile',
                              0,
                              None,
                              None,
                              None,
                              1614884096,
                              47)]),
                           (u'/Users/benweinstein/Documents/DeepForest-pytorch/tests/test_visualize.py',
                            [('test_plot_predictions_and_targets',
                              0,
                              None,
                              None,
                              None,
                              1614717355,
                              36),
                             ('test_format_boxes',
                              0,
                              None,
                              None,
                              None,
                              1614717355,
                              26)]),
                           (u'/Users/benweinstein/Documents/DeepForest-pytorch/tests/test_IoU.py',
                            [('test_compute_IoU',
                              0,
                              None,
                              None,
                              None,
                              1614965285,
                              13)]),
                           (u'/Users/benweinstein/Documents/DeepForest-pytorch/tests/test_utilities.py',
                            [('test_use_release',
                              0,
                              None,
                              None,
                              None,
                              1614883898,
                              27),
                             ('test_xml_to_annotations',
                              0,
                              None,
                              None,
                              None,
                              1614883682,
                              18),
                             ('test_float_warning',
                              2,
                              None,
                              None,
                              ('',
                               "<ExceptionInfo FileNotFoundError(\"There is "\
                               "no config at /Users/benweinstein/Documents/D"\
                               "eepForest-pytorch/deepforest/data/deepforest"\
                               "_c...] No such file or directory: '/Users/be"\
                               "nweinstein/Documents/DeepForest-pytorch/deep"\
                               "forest/data/deepforest_config.yml'\") tblen="\
                               "2>",
                               "FileNotFoundError: There is no config at /Us"\
                               "ers/benweinstein/Documents/DeepForest-pytorc"\
                               "h/deepforest/data/deepforest_config.yml, yie"\
                               "lds [Errno 2] No such file or directory: '/U"\
                               "sers/benweinstein/Documents/DeepForest-pytor"\
                               "ch/deepforest/data/deepforest_config.yml'",
                               [(u'/Users/benweinstein/Documents/DeepForest-pytorch/tests/test_utilities.py',
                                 '/Users/benweinstein/Documents/DeepForest-p'\
                                 'ytorch/tests/test_utilities.py',
                                 15,
                                 'config',
                                 None,
                                 '    config = utilities.read_config(get_dat'\
                                 'a("deepforest_config.yml"))'),
                                (u'/Users/benweinstein/Documents/DeepForest-pytorch/deepforest/utilities.py',
                                 '/Users/benweinstein/Documents/DeepForest-p'\
                                 'ytorch/deepforest/utilities.py',
                                 26,
                                 'read_config',
                                 None,
                                 '        raise FileNotFoundError("There is '\
                                 'no config at {}, yields {}".format(')],
                               0,
                               None,
                               None,
                               None,
                               None),
                              1614883682,
                              32)]),
                           (u'/Users/benweinstein/Documents/DeepForest-pytorch/tests/test_callbacks.py',
                            [('test_log_images',
                              0,
                              None,
                              None,
                              None,
                              1614989870,
                              25)])],
                          {u'/Users/benweinstein/Documents/DeepForest/tests/test_deepforest.py': (u'Test process aborted: some tests were not run',
        1607966490)})
